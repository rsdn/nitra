using DotNet;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;
using Nitra.Declarations;
using Nitra.Internal;
using Nitra.ProjectSystem;

using Microsoft.Cci;

using System;
using System.IO;
using System.Diagnostics;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Collections.Immutable;
using System.Linq;

using System.Threading;
using NRB = Nitra.Declarations;

namespace Nitra.BackEnd.Cci
{
  [Record]
  public partial class CciBackEnd : DotNet.IDotNetBackEnd
  {
    public static NoLocation : Location           = Location(SourceSnapshot.Default.File, NSpan(0));
    public static NoFile     : ProjectSystem.File = SourceSnapshot.Default.File;
    public static NoSpan     : NSpan              = NSpan(0);

    public CciHost : IMetadataHost { get; protected set; }

    [RecordIgnore] public  PlatformType              : DotNet.IPlatformType                   { get; private set; }
    [RecordIgnore] public  CancellationToken         : CancellationToken                      { get; set; }
    [RecordIgnore] _cciInternedKeyToCCiSymbolMap     : Hashtable[uint, ITypeDefinition]       = Hashtable();
    [RecordIgnore] _cciInternedKeyToSymbolMap        : Hashtable[uint, TypeSymbol]            = Hashtable();
    [RecordIgnore] _cciInternedKeyToGenericSymbolMap : ConcurrentDictionary[uint, TypeSymbol] = ConcurrentDictionary();
    [RecordIgnore] mutable _singleDimensionArray     : SingleDimensionArraySymbol;
    [RecordIgnore] mutable _cciObject                : INamespaceTypeDefinition;
    [RecordIgnore] mutable _objectSymbol             : TypeSymbol;
    [RecordIgnore] mutable _cciExtensionAttribute    : INamespaceTypeDefinition;
    [RecordIgnore] mutable _cciExtensionAttributeKey : uint;

    public this() { this(CciHost()) }

    public Types                : Seq[TypeSymbol]            { get { _cciInternedKeyToSymbolMap.Values } }
    public Object               : TypeSymbol                 { get { _objectSymbol } }
    public SingleDimensionArray : SingleDimensionArraySymbol { get { _singleDimensionArray } }

    public LoadExternalSymbols(libs : IEnumerable[LibReference], libPath : string, compilerMessages : ICompilerMessages, context : DependentPropertyEvalContext) : NamespaceSymbol
    {
      LoadExternalSymbols(libs, libPath, (loc, err) => compilerMessages.Error(loc, err), context);
    }

    IgnoreName(name : string) : bool
    {
      foreach (ch when ch == '<' || ch == '?' in name)
        return true;
      false
    }

    public LoadExternalSymbols(libs : IEnumerable[LibReference], libPath : string, addError : System.Action[Location, string], context : DependentPropertyEvalContext) : NamespaceSymbol
    {
      Debug.WriteLine("LoadExternalSymbols started");

      def timer = Stopwatch.StartNew();
      _singleDimensionArray = null;
      _cciObject = null;
      _objectSymbol = null;

      _cciInternedKeyToSymbolMap.Clear();
      _cciInternedKeyToCCiSymbolMap.Clear();
      _cciInternedKeyToGenericSymbolMap.Clear();

      def rootNamespace = NamespaceSymbol();
      rootNamespace.DeclaredIn  = null;
      rootNamespace.FullName    = "";
      rootNamespace.EvalProperties(context);

      def host = CciHost;
      def loadedAsmsSet = HashSet();

      _cciExtensionAttribute    = host.PlatformType.SystemRuntimeCompilerServicesExtensionAttribute.ResolvedType;
      _cciExtensionAttributeKey = _cciExtensionAttribute.InternedKey;

      foreach(lib in libs)
      {
        | proj is ProjectReference     with filePath = proj.Path
        | name is FullNameLibReference with filePath = name.Path
        | file is FileLibReference     with filePath = file.Path =>
          this.CancellationToken.ThrowIfCancellationRequested();

          def fullPath = IO.Path.Combine(libPath, filePath);

          unless (IO.File.Exists(fullPath))
          {
            addError(NoLocation, "Referenced file '" + fullPath + "' is not found.");
            continue;
          }

          def unit = host.LoadUnitFrom(fullPath);
          when (unit == null || unit.Equals(Dummy.Module) || unit.Equals(Dummy.Assembly) || !(unit is IAssembly))
          {
            addError(NoLocation, "Referenced file '" + fullPath + "' is not .Net assembly.");
            continue;
          }

          def asm = unit :> IAssembly;

          unless (loadedAsmsSet.Add(asm.AssemblyIdentity))
            continue; // already loaded

          def assemblyLocation = Location(SingleLineSourceSnapshot("", fullPath), NSpan(0));
            
          def initTypeSymbol(typeSymbol : DeclaredTypeSymbol, type : ITypeDefinition) : void
          {
            def internedKey = type.InternedKey;
            _cciInternedKeyToSymbolMap[internedKey]    = typeSymbol;
            _cciInternedKeyToCCiSymbolMap[internedKey] = type;

            when (typeSymbol is GenericTypeSymbol as genericSymbol)
              MakeTypeParameters(context, genericSymbol, type);

            def modifierHost = typeSymbol;
            def flags = ModifierSet(context);
            mutable modifiers;
            when (type.IsAbstract)
              modifiers |= Modifiers.Abstract;
            when (type.IsSealed)
              modifiers |= Modifiers.Sealed;
            when (type.IsStatic)
              modifiers |= Modifiers.Static;

            // Modifiers
            match (type)
            {
              | INamespaceTypeDefinition as nsType =>
                when (nsType.IsPublic)
                  modifiers |= Modifiers.Public;

              | INestedTypeDefinition as nsType => modifiers |= MakeModifiers(nsType.Visibility);
              | _ => ()
            }

            flags.Add(modifiers);
            modifierHost.Flags = flags;

            when ((typeSymbol : DeclarationSymbol)  is CustomAttributeHostDeclarationSymbol as attrHost)
              attrHost.CustomAttributes = LazyAttributeList(type, this);

            when ((typeSymbol : DeclarationSymbol) is Nitra.Declarations.ContainerSymbol as cont)
            {
              def memberTable = TypeMemberScope(cont, "MemberTable", this);
              cont.MemberTable = memberTable;
            }

            typeSymbol.EvalProperties(context);

            when (typeSymbol is GenericContainerTypeSymbol as genericContainerTypeSymbol)
            {
              def nestedTypes = LightList();
              foreach (cciNestedType in type.NestedTypes)
              {
                when (TypeHelper.IsVisibleOutsideAssembly(cciNestedType))
                  nestedTypes.Add(loadNestedType(cciNestedType, genericContainerTypeSymbol));
              }

              genericContainerTypeSymbol.NestedTypes = nestedTypes.ToArray();
            }
          }
          and loadNestedType(type : INestedTypeDefinition, declaredIn : GenericContainerTypeSymbol) : NestedTypeSymbol
          {
            def name = Name(assemblyLocation, type.Name.Value); // TODO: type.Name.UniqueKey
            def symbol : NestedTypeSymbol  =
                     if (type.IsDelegate)  ExternalNestedTypeDeclaration.[NestedDelegateSymbol] (name, type).DefineSymbol(declaredIn.MemberTable)
                else if (type.IsInterface) ExternalNestedTypeDeclaration.[NestedInterfaceSymbol](name, type).DefineSymbol(declaredIn.MemberTable)
                else if (type.IsEnum)      ExternalNestedTypeDeclaration.[NestedEnumSymbol]     (name, type).DefineSymbol(declaredIn.MemberTable)
                else if (type.IsValueType) ExternalNestedTypeDeclaration.[NestedStructSymbol]   (name, type).DefineSymbol(declaredIn.MemberTable)
                else                       ExternalNestedTypeDeclaration.[NestedClassSymbol]    (name, type).DefineSymbol(declaredIn.MemberTable);

            unless (symbol.IsDeclaredInEvaluated)
              symbol.DeclaredIn = declaredIn;

            initTypeSymbol(symbol, type);
            symbol
          }
          def loadNsMember(member : INamespaceMember, declaredIn : NamespaceSymbol) : void
          {
            match (member)
            {
              | type is INamespaceTypeDefinition when type.IsPublic =>
                def strName = type.Name.Value;
                when (IgnoreName(strName))
                  return;

                def name = Name(assemblyLocation, strName); // TODO: type.Name.UniqueKey
                def symbol : TopTypeSymbol =
                         if (type.IsDelegate)  ExternalTopTypeDeclaration.[TopDelegateSymbol] (name, type).DefineSymbol(declaredIn.MemberTable)
                    else if (type.IsInterface) ExternalTopTypeDeclaration.[TopInterfaceSymbol](name, type).DefineSymbol(declaredIn.MemberTable)
                    else if (type.IsEnum)      ExternalTopTypeDeclaration.[TopEnumSymbol]     (name, type).DefineSymbol(declaredIn.MemberTable);
                    else if (type.IsValueType) ExternalTopTypeDeclaration.[TopStructSymbol]   (name, type).DefineSymbol(declaredIn.MemberTable)
                    else
                    {
                      def cls = ExternalTopTypeDeclaration.[TopClassSymbol] (name, type).DefineSymbol(declaredIn.MemberTable);
                      cls.HasExtensionMethod = type.IsStatic && HasExtensionAttribute(type.Attributes);
                      cls
                    }

                unless (symbol.IsDeclaredInEvaluated)
                  symbol.DeclaredIn = declaredIn;

                initTypeSymbol(symbol, type);

              | cciNs is INamespaceDefinition => //loadNsMembers(ns, nsSymbol.MemberTable)
                def strName = cciNs.Name.Value;
                when (IgnoreName(strName))
                  return;
                def name   = NRB.Name(NoLocation, strName); // TODO: ns.Name.UniqueKey
                def symbol = ExternalNamespaceDeclaration(name, cciNs).DefineSymbol(declaredIn.MemberTable);
                unless (symbol.IsDeclaredInEvaluated)
                  symbol.DeclaredIn = declaredIn;
                symbol.EvalProperties(context);
                foreach (subMember in cciNs.Members)
                  loadNsMember(subMember, symbol);

              | _ => {}
            }
          }

          foreach (subMember in asm.NamespaceRoot.Members with i)
          {
            when (i % 10 == 0)
              this.CancellationToken.ThrowIfCancellationRequested();
            loadNsMember(subMember, rootNamespace);
          }

        | _ => throw NotImplementedException("Loading types from " + lib + " not supported yet.")
      }

      Debug.WriteLine($"Read external symbols took: $(timer.Elapsed)");

      this.CancellationToken.ThrowIfCancellationRequested();

      InitSystemTypes(context, rootNamespace);
      InitBaseTypeSet(context);

      Debug.WriteLine($"Total of LoadExternalSymbols took: $(timer.Elapsed)");

      this.CancellationToken.ThrowIfCancellationRequested();

      rootNamespace
    }

    MakeTypeParameters(context : DependentPropertyEvalContext, symbol : GenericEntitySymbol, cciType : ITypeDefinition) : void
    {
      unless (symbol.IsTypeParametersCountEvaluated)
        symbol.TypeParametersCount = cciType.GenericParameterCount;
      unless (symbol.IsTypeParametersEvaluated)
        symbol.TypeParameters = CreateGenericParameters(cciType.GenericParameterCount, cciType.GenericParameters, context);
    }

    public LoadCustomAttribute(cciCustomAttribute : ICustomAttribute, context : DependentPropertyEvalContext) : CustomAttributeSymbol
    {
      def customAttributeSymbol = CustomAttributeSymbol();
      def cciAtrType = cciCustomAttribute.Type :> INamedTypeReference;
      def attrType = CciTypeToTypeSymbol(cciAtrType, context);
      customAttributeSymbol.Type = attrType;
      customAttributeSymbol.FullName = cciAtrType.ToString();
      def cciCtorKey = cciCustomAttribute.Constructor.InternedKey;
      def filter(sym : Member.ConstructorSymbol) : bool
      {
        def decl = sym.GetDeclarationsOfType.[ExternalConstructorDeclaration]().FirstOrDefault();
        when (decl == null)
          return false;

        decl.Method.InternedKey == cciCtorKey
      }
      def result = attrType.Scope.Bind(filter);
      when (result.HasResult)
        customAttributeSymbol.Constructor = result.GetSymbols().First();

      def cciArgToCustomAttributeExpression(cciExpr : IMetadataExpression) : CustomAttributeExpression
      {
        | c is IMetadataConstant =>
          match (c.Value)
          {
            | null        => CustomAttributeExpression.Null  ()
            | v is bool   => CustomAttributeExpression.Bool  (v)
            | v is byte   => CustomAttributeExpression.Byte  (v)
            | v is char   => CustomAttributeExpression.Char  (v)
            | v is double => CustomAttributeExpression.Double(v)
            | v is float  => CustomAttributeExpression.Float (v)
            | v is int    => CustomAttributeExpression.Int   (v)
            | v is long   => CustomAttributeExpression.Long  (v)
            | v is sbyte  => CustomAttributeExpression.Sbyte (v)
            | v is short  => CustomAttributeExpression.Short (v)
            | v is string => CustomAttributeExpression.String(v)
            | v is uint   => CustomAttributeExpression.Uint  (v)
            | v is ulong  => CustomAttributeExpression.Ulong (v)
            | v is ushort => CustomAttributeExpression.Ushort(v)
            | _ => assert(false);
          }

        | a is IMetadataCreateArray =>
          def elemType = CciTypeToTypeSymbol(a.ElementType, context);
          def elems = a.Initializers.MapToArray(cciArgToCustomAttributeExpression);
          CustomAttributeExpression.Array(elemType, elems)

        | t is IMetadataTypeOf => CustomAttributeExpression.Type(CciTypeToTypeSymbol(t.Type, context))
      }
      customAttributeSymbol.Arguments = cciCustomAttribute.Arguments.MapToArray(cciArgToCustomAttributeExpression);
      def cciNamedArgToCustomAttributeExpression(a : IMetadataNamedArgument) : CustomAttributeNamedArgument
      {
        def expr = cciArgToCustomAttributeExpression(a.ArgumentValue);
        def nameId = StringIndex.GetId(a.ArgumentName.Value); // TODO: ns.Name.UniqueKey
        CustomAttributeNamedArgument(nameId, expr)
      }
      customAttributeSymbol.NamedArguments = cciCustomAttribute.NamedArguments.MapToArray(cciNamedArgToCustomAttributeExpression);

      def name   = NRB.Name(NoLocation, cciAtrType.Name.Value);
      customAttributeSymbol.AddDeclaration(ExternalCustomAttributeDeclaration(name, cciCustomAttribute));
      customAttributeSymbol.EvalProperties(context);
      customAttributeSymbol
    }

    public Dispose() : void
    {
      when ((CciHost : object) is IDisposable as d)
        d.Dispose();
    }

    MakeModifiers(visibility : TypeMemberVisibility) : Modifiers
    {
      mutable modifiers;
      when (visibility == TypeMemberVisibility.Private)
        modifiers |= Modifiers.Private;
      when (visibility == TypeMemberVisibility.Public)
        modifiers |= Modifiers.Public;
      when (visibility == TypeMemberVisibility.FamilyOrAssembly)
        modifiers |= (Modifiers.Protected | Modifiers.Internal);
      when (visibility == TypeMemberVisibility.Family)
        modifiers |= Modifiers.Protected;
      modifiers
    }

    internal HasExtensionAttribute(attributes : Seq[ICustomAttribute]) : bool
    {
      foreach (a when a != null in attributes)
        when (a.Type.InternedKey == _cciExtensionAttributeKey)
          return true;
      false
    }

    LoadDefaultValue(parameter : IParameterDefinition) : DefaultValue
    {
      unless (parameter.HasDefaultValue)
        return DefaultValue.None();
      //ResolvedType(defaultValue.Type);
      unchecked match (parameter.DefaultValue.Value)
      {
        | null                => DefaultValue.Null()
        | x is string         => DefaultValue.String(x)
        | x is System.Int16   => DefaultValue.Number(x :> ulong, false, false)
        | x is System.Int32   => DefaultValue.Number(x :> ulong, false, false)
        | x is System.Int64   => DefaultValue.Number(x :> ulong, false, false)
        | x is System.UInt16  => DefaultValue.Number(x :> ulong, true, false)
        | x is System.UInt32  => DefaultValue.Number(x :> ulong, true, false)
        | x is System.UInt64  => DefaultValue.Number(x, true, false)
        | x is System.Single  => DefaultValue.Single(x)
        | x is System.Double  => DefaultValue.Double(x)
        | x is System.Decimal => DefaultValue.Decimal(x)
        | x is System.Boolean => DefaultValue.Bool(x)
        | _                   => DefaultValue.Error()
      }
    }

    internal LoadParameters(paremeters : Seq[IParameterDefinition], parameterizable : ParameterizableSymbol, context : DependentPropertyEvalContext) : ImmutableArray[FormalParameterSymbol]
    {
      def location = parameterizable.FirstDeclarationOrDefault.Location;
      def containingScope = parameterizable.ParameterScope;
      def builder = ImmutableArray.CreateBuilder();
      foreach (p in paremeters)
      {
        //FormalParameter
        def parameterName = Name(location, p.Name.Value); // TODO: type.Name.UniqueKey
        def parameter = ExternalParameterDeclaration(parameterName, p).DefineSymbol(containingScope);
        parameter.Type = CciTypeToTypeSymbol(p.Type, context);
        mutable parameterModifier;
        when (p.IsOut)
          parameterModifier |= ParameterModifier.Out;
        when (p.IsByReference)
          parameterModifier |= ParameterModifier.Ref;
        when (p.IsParameterArray)
          parameterModifier |= ParameterModifier.Params;
        parameter.Modifier = parameterModifier;
        parameter.Index = p.Index;
        parameter.Default = LoadDefaultValue(p);
        parameter.DeclaredIn = parameterizable;
        parameter.EvalProperties(context);
        builder.Add(parameter);
      }
      builder.ToImmutable()
    }

    internal LoadTypeMembers(member : ITypeDefinitionMember, declaredIn : ContainerSymbol, context : DependentPropertyEvalContext) : DeclarationSymbol
    {
      def visibility = member.Visibility;

      //when (visibility != TypeMemberVisibility.Public && visibility != TypeMemberVisibility.Family && visibility != TypeMemberVisibility.FamilyOrAssembly)
      //  return;

      def location = declaredIn.FirstDeclarationOrDefault.Location;
      def makeStaticIf(isStatic : bool, flags : ModifierSet) : void { when (isStatic) flags.Add(Modifiers.Static) }
      def name = Name(location, member.Name.Value); // TODO: type.Name.UniqueKey
      def flags = ModifierSet(context);
      flags.Add(MakeModifiers(visibility));

      def symbol : DeclarationSymbol =
        match (member)
        {
          | m is IPropertyDefinition =>
            makeStaticIf(m.IsStatic, flags);
            def prop = ExternalPropertyDeclaration(name, m).DefineSymbol(declaredIn.MemberTable);
            prop.Flags = flags;
            unless (prop.IsDeclaredInEvaluated)
              prop.DeclaredIn = declaredIn :> GenericContainerTypeSymbol;
            prop.Type = CciTypeToTypeSymbol(m.Type, context);
            assert2(prop.Type != null);
            prop

          | m is IMethodDefinition when m.IsConstructor =>
            def method = ExternalConstructorDeclaration(name, m).DefineSymbol(declaredIn.MemberTable);
            makeStaticIf(m.IsStatic, flags);
            method.Flags = flags;
            unless (method.IsDeclaredInEvaluated)
              method.DeclaredIn = declaredIn :> GenericContainerTypeSymbol;
            method.Parameters = LoadParameters(m.Parameters, method, context);
            method

          | m is IMethodDefinition   =>
            makeStaticIf(m.IsStatic, flags);
            def method = ExternalMethodDeclaration(name, m).DefineSymbol(declaredIn.MemberTable);
            method.Flags = flags;

            unless (method.IsDeclaredInEvaluated)
              method.DeclaredIn = declaredIn :> GenericContainerTypeSymbol;
            unless (method.IsTypeParametersCountEvaluated)
              method.TypeParametersCount = m.GenericParameterCount;
            unless (method.IsTypeParametersEvaluated)
              method.TypeParameters = CreateGenericParameters(m.GenericParameterCount, m.GenericParameters, context);

            method.IsExtensionMethod = m.IsStatic && HasExtensionAttribute(m.Attributes);

            method.ReturnType = CciTypeToTypeSymbol(m.Type, context);
            method.Parameters = LoadParameters(m.Parameters, method, context);
            def type = FunctionTypeSymbol();
            type.Parameters = method.Parameters.Select(p => p.Type).ToImmutableArray();
            type.Return = method.ReturnType;
            type.EvalProperties(context);
            method.FunctionType = type;
            method.Type = type;
            method.IsExtensionMethod = false;
            method

          | m is IFieldDefinition    =>
            if (member.ContainingTypeDefinition.IsEnum)
            {
              def field = ExternalEnumFieldDeclaration(name, m).DefineSymbol(declaredIn.MemberTable);
              field.Value = m.CompileTimeValue.Value;
              //field.Flags = flags;
              unless (field.IsDeclaredInEvaluated)
                field.DeclaredIn = declaredIn :> EnumSymbol;
              unless (field.IsTypeEvaluated)
                field.Type = declaredIn :> EnumSymbol;
              field
            }
            else
            {
              makeStaticIf(m.IsStatic, flags);

              when(m.IsReadOnly)
                flags.Add(Modifiers.Readonly);

              def field = ExternalFieldDeclaration (name, m).DefineSymbol(declaredIn.MemberTable);
              field.Flags = flags;
              unless (field.IsDeclaredInEvaluated)
                field.DeclaredIn = declaredIn :> GenericContainerTypeSymbol;;
              field.Type = CciTypeToTypeSymbol(m.Type, context);
              field
            }

          | m is IEventDefinition    =>
            def evnt = ExternalEventDeclaration   (name, m).DefineSymbol(declaredIn.MemberTable);
            unless (evnt.IsDeclaredInEvaluated)
              evnt.DeclaredIn = declaredIn :> GenericContainerTypeSymbol;
            evnt.Type = CciTypeToTypeSymbol(m.Type, context);
            evnt

          | _ => assert(false)
        };

        when (symbol is CustomAttributeHostDeclarationSymbol as attrHost)
          attrHost.CustomAttributes = LazyAttributeList(member, this);

        symbol.EvalProperties(context);
        symbol
    }

    CciTypeToTypeSymbol(cciTypeReference : ITypeReference, context : DependentPropertyEvalContext) : TypeSymbol
    {
      def result : TypeSymbol =
        match (cciTypeReference)
        {
          | t is IGenericTypeParameter =>
            def typeInfo = CciTypeToTypeSymbol(t.DefiningType, context) :> GenericTypeSymbol;
            if (typeInfo : object == _objectSymbol)
              typeInfo
            else
              typeInfo.TypeParameters[t.Index];

          | t is IArrayTypeReference =>
            def args = ImmutableArray.Create(CciTypeToTypeSymbol(t.ElementType, context));
            def typeInfo = if (t.IsVector) _singleDimensionArray : ArraySymbol
                            else
                            {
                              def a = MultiDimensionArraySymbol();
                              a.TypeParametersCount = 0;
                              a.Rank        = t.Rank;
                              //a.LowerBounds = t.LowerBounds.ToArray();
                              //a.Sizes       = t.Sizes.ToArray();
                              a.EvalProperties(context);
                              a
                            };
            def constructedType = TopConstructedTypeSymbol();
            constructedType.TypeInfo = typeInfo;
            constructedType.Args = args;
            //constructedType.Scope = typeInfo.Scope;
            constructedType.EvalProperties(context);
            constructedType

          | gp is IGenericParameter => CreateGenericParameter(gp, 0, context)
          | t is ITypeDefinition =>
            mutable typeSymbol;
            if (_cciInternedKeyToSymbolMap.TryGetValue(t.InternedKey, out typeSymbol))
            {
              typeSymbol
            }
            else
            {
              // the type definition not found
              _objectSymbol
            }

          | t is IGenericTypeInstanceReference =>
            mutable typeSymbol;

            if (_cciInternedKeyToGenericSymbolMap.TryGetValue(cciTypeReference.InternedKey, out typeSymbol))
              typeSymbol
            else
            {
              def typeInfo = CciTypeToTypeSymbol(t.GenericType, context) :> GenericTypeSymbol;
              if (typeInfo.Id == _objectSymbol.Id)
                _objectSymbol
              else
              {
                def args = t.GenericArguments.Select(CciTypeToTypeSymbol(_, context)).ToImmutableArray();
                def name = Name(NoLocation, t.GenericType.Name.Value);
                def constructedType = ExternalConstructedTypeDeclaration.[TopConstructedTypeSymbol] (name, ResolvedType(t)).DefineSymbol(null);

                constructedType.TypeInfo = typeInfo;
                constructedType.Args = args;
                constructedType.EvalProperties(context);
                def ok = _cciInternedKeyToGenericSymbolMap.TryAdd(cciTypeReference.InternedKey, constructedType);
                assert2(ok);
                constructedType
              }
            }

          | _ =>
            mutable typeSymbol;

            if (_cciInternedKeyToSymbolMap.TryGetValue(cciTypeReference.InternedKey, out typeSymbol))
              typeSymbol
            else
              _objectSymbol
        };

        assert2(result != null);
        result
    }

    CreateGenericParameter(genericParam : IGenericParameter, index : int, context : DependentPropertyEvalContext) : TypeSymbol
    {
      mutable typeSymbol;
      if (_cciInternedKeyToSymbolMap.TryGetValue(genericParam.InternedKey, out typeSymbol))
        typeSymbol :> TypeParameterSymbol
      else
      {
        def tps = TypeParameterSymbol();
        tps.UpdateName(genericParam.Name.Value); // TODO: type.Name.UniqueKey
        tps.Index = index;
        tps.Variance =
          match (genericParam.Variance)
          {
            | TypeParameterVariance.Contravariant => Variance.Contravariant
            | TypeParameterVariance.Covariant     => Variance.Covariant
            | _                                   => Variance.None
          };
        tps.EvalProperties(context);
        _cciInternedKeyToSymbolMap[genericParam.InternedKey] = tps;
        tps
      }
    }

    CreateGenericParameters(genericParameterCount : ushort, genericParams : Seq[IGenericParameter], context : DependentPropertyEvalContext) : ImmutableArray[TypeSymbol]
    {
      if (genericParameterCount == 0)
        ImmutableArray.Empty
      else
      {
        def result = ImmutableArray.CreateBuilder(genericParameterCount : int);
        foreach (tp in genericParams with i)
          result.Add(CreateGenericParameter(tp, i, context));
        result.MoveToImmutable()
      }
    }

    InitSystemTypes(context : DependentPropertyEvalContext, rootNamespace : NamespaceSymbol) : void
    {
      def textName             = "#Array1";
      def name                 = Name(NoLocation, textName); // TODO: type.Name.UniqueKey
      def cciType              = CciHost.PlatformType.SystemArray.ResolvedType;
      def singleDimensionArray = ExternalTopTypeDeclaration.[SingleDimensionArraySymbol] (name, cciType).DefineSymbol(rootNamespace.MemberTable);
      def modifiers            = ModifierSet(context);
      modifiers.Add(Modifiers.Public);
      singleDimensionArray.DeclaredIn          = rootNamespace;
      singleDimensionArray.Flags               = modifiers;
      singleDimensionArray.FullName            = textName;
      singleDimensionArray.TypeParametersCount = 1;
      singleDimensionArray.TypeParameters      = ImmutableArray.Create(MakeArrayTypeParameter(context));
      //singleDimensionArray.BaseTypeSet // TODO: fill with array interfaces
      singleDimensionArray.EvalProperties(context);
      _singleDimensionArray = singleDimensionArray;

      def cciObject = CciHost.PlatformType.SystemObject.ResolvedType;
      _cciObject = cciObject;
      _ = _cciInternedKeyToSymbolMap.TryGetValue(cciObject.InternedKey, out _objectSymbol);

      this.PlatformType = PlatformTypeImpl(this);
    }

    MakeArrayTypeParameter(context : DependentPropertyEvalContext) : TypeSymbol
    {
      def tps = TypeParameterSymbol();
      tps.UpdateName("T");
      tps.Index = 0;
      tps.EvalProperties(context);
      tps
    }

    ResolvedType(ccTypeRef : ITypeReference) : ITypeDefinition
    {
      mutable result;
      unless (_cciInternedKeyToCCiSymbolMap.TryGetValue(ccTypeRef.InternedKey, out result))
      when (ccTypeRef is IGenericTypeInstanceReference as gtr)
      {
        _ = _cciInternedKeyToCCiSymbolMap.TryGetValue(gtr.GenericType.InternedKey, out result);
      }
      result
    }

    InitBaseTypeSet(context : DependentPropertyEvalContext) : void
    {
      when (_objectSymbol == null)
        return;
      def timer = Stopwatch.StartNew();
      mutable resolvs = 0;
      mutable resolvedByKey = 0;
      mutable resolvedByResolvedTypeProp = 0;

      foreach (x when x.FirstDeclarationOrDefault != null in _cciInternedKeyToSymbolMap.Values)
      {
        def cciType = (x.FirstDeclarationOrDefault :> IExternalTypeDeclaration).Type;
        match (x)
        {
          | EnumSymbol as en =>
            def ext = en.GetDeclarationsUntyped().OfType.[IExternalTypeDeclaration]().FirstOrDefault();
            assert2(ext != null);
            def type = ext.Type;
            en.UnderlyingType = CciTypeToTypeSymbol(type.UnderlyingType, context);

          | SupportsInheritanceTypeSymbol as type =>
            def baseTypeSet = BaseTypeReferenceSet(context);
            type.BaseTypeSet = baseTypeSet;
            foreach (cciBaseClasse in cciType.BaseClasses)
            {
              def typeSymbol = CciTypeToTypeSymbol(cciBaseClasse, context);
              when (typeSymbol : object != _objectSymbol)
                baseTypeSet.AddParent(typeSymbol);
            }
            foreach (cciInterface in cciType.Interfaces)
            {
              def cciInterfaceDef = ResolvedType(cciInterface);
              when (cciInterfaceDef != null && TypeHelper.IsVisibleOutsideAssembly(cciInterfaceDef))
              {
                def typeSymbol = CciTypeToTypeSymbol(cciInterfaceDef, context);
                when (typeSymbol : object != _objectSymbol)
                {
                  baseTypeSet.AddParent(typeSymbol);
                }
              }
            }
            type.EvalProperties(context);

          | _ => ()
        }
      }

      context.NextPass();

      foreach (x in _cciInternedKeyToSymbolMap.Values) {
        x.EvalProperties(context);

        when ((x : DeclarationSymbol) is ContainerSymbol as containerSymbol)
          unless (containerSymbol.IsScopeEvaluated)
            x.Scope = containerSymbol.MemberTable;
      }

      Debug.WriteLine($"InitBaseTypeSet took: $(timer.Elapsed) resolvs=$resolvs, resolvedByKey=$resolvedByKey, resolvedByResolvedTypeProp=$resolvedByResolvedTypeProp");
    }
  }


  [Record]
  public class ExternalNamespaceDeclaration : ExternalDeclaration[NamespaceSymbol]
  {
    public Namespace : INamespaceDefinition { get; private set; }
    public override CreateSymbol() : DeclarationSymbol { NamespaceSymbol() }
  }

  public interface IExternalTypeDeclaration
  {
    Type : ITypeDefinition { get; }
  }

  public interface IExternalTopTypeDeclaration
  {
    Type : INamespaceTypeDefinition { get; }
  }

  public interface IExternalNestedTypeDeclaration
  {
    Type : INestedTypeDefinition { get; }
  }

  interface IArrayDeclaration
  {
    Type : IArrayType { get; }
  }

  [Record]
  public class ExternalTopTypeDeclaration[TSymbol] : ExternalDeclaration[TSymbol], IExternalTopTypeDeclaration, IExternalTypeDeclaration
    where TSymbol : DeclarationSymbol
  {
    public Type : INamespaceTypeDefinition { get; private set; }
  }

  [Record]
  public class ExternalConstructedTypeDeclaration[TSymbol] : ExternalDeclaration[TSymbol], IExternalTypeDeclaration
    where TSymbol : DeclarationSymbol
  {
    public Type : ITypeDefinition { get; private set; }
  }

  [Record]
  public class ExternalNestedTypeDeclaration[TSymbol] : ExternalDeclaration[TSymbol], IExternalNestedTypeDeclaration, IExternalTypeDeclaration
    where TSymbol : DeclarationSymbol
  {
    public Type : INestedTypeDefinition { get; private set; }
  }

  [Record]
  public class ExternalPropertyDeclaration : ExternalDeclaration[Member.PropertySymbol]
  {
    public Property : IPropertyDefinition;
    public override CreateSymbol() : DeclarationSymbol { Member.PropertySymbol() }
  }

  [Record]
  public class ExternalMethodDeclaration : ExternalDeclaration[Member.MethodSymbol]
  {
    public Method : IMethodDefinition;
    public override CreateSymbol() : DeclarationSymbol { Member.MethodSymbol() }
  }

  [Record]
  public class ExternalConstructorDeclaration : ExternalDeclaration[Member.ConstructorSymbol]
  {
    public Method : IMethodDefinition;
    public override CreateSymbol() : DeclarationSymbol { Member.ConstructorSymbol() }
  }

  [Record]
  public class ExternalFieldDeclaration : ExternalDeclaration[Member.FieldSymbol]
  {
    public Field : IFieldDefinition;
    public override CreateSymbol() : DeclarationSymbol { Member.FieldSymbol() }
  }

  [Record]
  public class ExternalEnumFieldDeclaration : ExternalDeclaration[EnumMemberSymbol]
  {
    public Field : IFieldDefinition;
    public override CreateSymbol() : DeclarationSymbol { EnumMemberSymbol() }
  }

  [Record]
  public class ExternalEventDeclaration : ExternalDeclaration[Member.EventSymbol]
  {
    public Event : IEventDefinition;
    public override CreateSymbol() : DeclarationSymbol { Member.EventSymbol() }
  }

  [Record]
  public class ExternalParameterDeclaration : ExternalDeclaration[FormalParameterSymbol]
  {
    public Parameter : IParameterDefinition;
    public override CreateSymbol() : DeclarationSymbol { FormalParameterSymbol() }
  }

  [Record]
  public class ExternalCustomAttributeDeclaration : ExternalDeclaration[CustomAttributeSymbol]
  {
    public Attribute : ICustomAttribute;
    public override CreateSymbol() : DeclarationSymbol { CustomAttributeSymbol() }
  }
}
