using Nitra;
using Nitra.BackEnd.Dnlib;
using Nitra.Declarations;
using Nitra.Internal;
using Nitra.ProjectSystem;

using DotNet;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

using System.Threading;
using ND = Nitra.Declarations;

namespace CSharp
{
  public class CSharpProjectEvalPropertiesHost : ProjectEvalPropertiesHost
  {
    protected _rootNamespace : NamespaceSymbol;

    public this(files : ImmutableArray[FileEvalPropertiesData], rootNamespace : NamespaceSymbol, params symbols : array[DeclarationSymbol])
    {
      def builder = ImmutableArray.CreateBuilder(symbols.Length + 1);
      builder.AddRange(symbols);
      builder.Add(rootNamespace);
      base(files, builder.MoveToImmutable());
      _rootNamespace = rootNamespace;
    }

    protected override BeforeStage(context : DependentPropertyEvalContext, _passName : string) : void
    {
      match (context.Stage)
      {
        | 0 =>
          foreach (file in _files)
            when (file.Ast is CompilationUnit as cu)
              cu.RootNamespace = _rootNamespace;

        | 1 =>
          foreach (file in _files)
            when (file.Ast is CompilationUnit as cu)
              cu.Scope = _rootNamespace.Scope;

        | _ => ()
      }
    }
  }
}
