using System.Globalization;
using Nitra;
using Nitra.Declarations;

using DotNet;

using Nemerle.Collections;

namespace CSharp
{
  map syntax Core.Expression -> DotNet.Expr;

  map syntax Expressions.Expression.True -> DotNet.Expr
  {
    BooleanLiteral    { Value = ParsedValue(Span, true); }
  }

  map syntax Expressions.Expression.False -> DotNet.Expr
  {
    BooleanLiteral    { Value = ParsedValue(Span, false); }
  }

  map syntax Expressions.Expression.RegularStringLiteral -> DotNet.Expr
  {
    String         { RegularStringLiteral -> Value; }
  }

  map syntax Expressions.Expression.VerbatimStringLiteral -> DotNet.Expr
  {
    String         { VerbatimStringLiteral -> Value; }
  }

  map syntax Expressions.Expression.RealLiteral -> DotNet.Expr
  {
    RealLiteral    { Value = ParseUtils.MakeRealLiteral(this, RealLiteral); }
  }

  map syntax Expressions.Expression.DecimalIntegerLiteral -> DotNet.Expr
  {
    IntegerLiteral { Value = ParseUtils.MakeIntegerLiteral(Lit, Lit.Digits, Lit.SuffixOpt, 10); }
  }

  map syntax Expressions.Expression.HexadecimalIntegerLiteral -> DotNet.Expr
  {
    IntegerLiteral { Value = ParseUtils.MakeIntegerLiteral(Lit, Lit.Digits, Lit.SuffixOpt, 16) ;}
  }

  map syntax Expressions.Expression.CharacterLiteral -> DotNet.Expr
  {
    Char           { Value = ParsedValue(CharacterLiteral.Span, ' '); } // FIXME
  }

  map syntax Expressions.Expression.NullLiteral -> DotNet.Expr
  {
    NullLiteral    { }
  }

  map syntax Expressions.Expression.Parenthesized -> DotNet.Expr
  {
    Parenthesized {
      Expression -> Expression;
    }
  }

  map syntax Expressions.Expression.Cast1 -> DotNet.Expr
  {
    Cast
    {
      AnyType -> TypeName;
      Expression -> Expression;
    }
  }

  map syntax Expressions.Expression.Cast2 -> DotNet.Expr
  {
    Cast
    {
      AnyType -> TypeName;
      Expression -> Expression;
    }
  }

  map syntax Expressions.Expression.ThisAccess -> DotNet.Expr
  {
    ThisAccess { }
  }

  map syntax Expressions.Expression.BaseAccessMember -> DotNet.Expr
  {
    BaseAccessMember { }
  }

  map syntax Expressions.Expression.BaseAccessIndexer -> DotNet.Expr
  {
    BaseAccessIndexer { }
  }

  map syntax Expressions.Expression.NewObject_1 -> DotNet.Expr
  {
    NewObject_1
    {
      AnyNonArrayType -> ConstructorType;
      //Arguments.Item1 -> Arguments;
    }
  }

  map syntax Expressions.Expression.NewArray_3 -> DotNet.Expr
  {
    NewArray { }
  }

  map syntax Expressions.Expression.NewArray_4 -> DotNet.Expr
  {
    NewArray { }
  }

  map syntax Expressions.Expression.TypeOf -> DotNet.Expr
  {
    TypeOf { }
  }

  map syntax Expressions.Expression.Checked -> DotNet.Expr
  {
    Checked { }
  }

  map syntax Expressions.Expression.Unchecked -> DotNet.Expr
  {
    Unchecked { }
  }

  map syntax Expressions.Expression.Default -> DotNet.Expr
  {
    Default { }
  }

  map syntax Expressions.Expression.Sizeof -> DotNet.Expr
  {
    Sizeof { }
  }

  map syntax Expressions.Expression.Assignment -> DotNet.Expr
  {
    Assignment { Expression1 -> Expr1; Expression2 -> Expr2; }
  }

  map syntax Expressions.Expression.MulAssignment -> DotNet.Expr
  {
    MulAssignment { Expression1 -> Expr1; Expression2 -> Expr2; }
  }

  map syntax Expressions.Expression.DivAssignment -> DotNet.Expr
  {
    DivAssignment { Expression1 -> Expr1; Expression2 -> Expr2; }
  }

  map syntax Expressions.Expression.RemainderAssignment -> DotNet.Expr
  {
    RemainderAssignment { Expression1 -> Expr1; Expression2 -> Expr2; }
  }

  map syntax Expressions.Expression.AddAssignment -> DotNet.Expr
  {
    AddAssignment { Expression1 -> Expr1; Expression2 -> Expr2; }
  }

  map syntax Expressions.Expression.SubAssignment -> DotNet.Expr
  {
    SubAssignment { Expression1 -> Expr1; Expression2 -> Expr2; }
  }

  map syntax Expressions.Expression.ShiftLeftAssignment -> DotNet.Expr
  {
    ShiftLeftAssignment { Expression1 -> Expr1; Expression2 -> Expr2; }
  }

  map syntax Expressions.Expression.ShiftRightAssignment -> DotNet.Expr
  {
    ShiftRightAssignment { Expression1 -> Expr1; Expression2 -> Expr2; }
  }

  map syntax Expressions.Expression.AndAssignment -> DotNet.Expr
  {
    AndAssignment { Expression1 -> Expr1; Expression2 -> Expr2; }
  }

  map syntax Expressions.Expression.XorAssignment -> DotNet.Expr
  {
    XorAssignment { Expression1 -> Expr1; Expression2 -> Expr2; }
  }

  map syntax Expressions.Expression.OrAssignment -> DotNet.Expr
  {
    OrAssignment { Expression1 -> Expr1; Expression2 -> Expr2; }
  }

  map syntax Expressions.Expression.Conditional -> DotNet.Expr
  {
    Conditional
    {
      Condition -> Condition;
      Expr1 -> Expr1;
      Expr2 -> Expr2;
    }
  }

  map syntax Expressions.Expression.NullCoalescing -> DotNet.Expr
  {
    NullCoalescing { Expr1 -> Expr1; Expr2 -> Expr2; }
  }

  map syntax Expressions.Expression.ConditionalOr -> DotNet.Expr
  {
    ConditionalOr { Expr1 -> Expr1; Expr2 -> Expr2; }
  }

  map syntax Expressions.Expression.ConditionalAnd -> DotNet.Expr
  {
    ConditionalAnd { Expr1 -> Expr1; Expr2 -> Expr2; }
  }

  map syntax Expressions.Expression.LogicalOr -> DotNet.Expr
  {
    LogicalOr { Expr1 -> Expr1; Expr2 -> Expr2; }
  }

  map syntax Expressions.Expression.LogicalXor -> DotNet.Expr
  {
    LogicalXor { Expr1 -> Expr1; Expr2 -> Expr2; }
  }

  map syntax Expressions.Expression.LogicalAnd -> DotNet.Expr
  {
    LogicalAnd { Expr1 -> Expr1; Expr2 -> Expr2; }
  }

  map syntax Expressions.Expression.Equal -> DotNet.Expr
  {
    Equal { Expr1 -> Expr1; Expr2 -> Expr2; }
  }

  map syntax Expressions.Expression.NotEqual -> DotNet.Expr
  {
    NotEqual { Expr1 -> Expr1; Expr2 -> Expr2; }
  }

  map syntax Expressions.Expression.LessThan -> DotNet.Expr
  {
    Less { Expr1 -> Expr1; Expr2 -> Expr2; }
  }

  map syntax Expressions.Expression.GreaterThan -> DotNet.Expr
  {
    Greater { Expr1 -> Expr1; Expr2 -> Expr2; }
  }

  map syntax Expressions.Expression.LessThanOrEqual -> DotNet.Expr
  {
    LessThanOrEqual { Expr1 -> Expr1; Expr2 -> Expr2; }
  }

  map syntax Expressions.Expression.GreaterThanOrEqual -> DotNet.Expr
  {
    GreaterThanOrEqual { Expr1 -> Expr1; Expr2 -> Expr2; }
  }

  map syntax Expressions.Expression.Is -> DotNet.Expr
  {
    Is
    {
      Expr1 -> Expr1;
      Expr2 -> TypeName; // FIXME
    }
  }

  map syntax Expressions.Expression.As -> DotNet.Expr
  {
    As
    {
      Expr1 -> Expr1;
      Expr2 -> TypeName;
    }
  }

  map syntax Expressions.Expression.ShiftLeft -> DotNet.Expr
  {
    ShiftLeft { Expr1 -> Expr1; Expr2 -> Expr2; }
  }

  map syntax Expressions.Expression.ShiftRight -> DotNet.Expr
  {
    ShiftRight { Expr1 -> Expr1; Expr2 -> Expr2; }
  }

  map syntax Expressions.Expression.Add -> DotNet.Expr
  {
    Sum { Expr1 -> Expr1; Expr2 -> Expr2; }
  }

  map syntax Expressions.Expression.Sub -> DotNet.Expr
  {
    Sub { Expr1 -> Expr1; Expr2 -> Expr2; }
  }

  map syntax Expressions.Expression.Mul -> DotNet.Expr
  {
    Multiply { Expr1 -> Expr1; Expr2 -> Expr2; }
  }

  map syntax Expressions.Expression.Div -> DotNet.Expr
  {
    Divide { Expr1 -> Expr1; Expr2 -> Expr2; }
  }

  map syntax Expressions.Expression.Remainder -> DotNet.Expr
  {
    Modulus { Expr1 -> Expr1; Expr2 -> Expr2; }
  }

  map syntax Expressions.Expression.PointerIndirection -> DotNet.Expr
  {
    PointerIndirection { Expr1 -> Expr1; }
  }

  map syntax Expressions.Expression.Identity -> DotNet.Expr
  {
    Identity  { Expr1 -> Expr1; }
  }

  map syntax Expressions.Expression.Negation -> DotNet.Expr
  {
    Negation { Expr1 -> Expr1; }
  }

  map syntax Expressions.Expression.LogicalNegation -> DotNet.Expr
  {
    LogicalNegation { Expr1 -> Expr1; }
  }

  map syntax Expressions.Expression.BitwiseNegation -> DotNet.Expr
  {
    BitwiseNegation { Expr1 -> Expr1; }
  }

  map syntax Expressions.Expression.PreIncrement -> DotNet.Expr
  {
    PreIncrement { Expr1 -> Expr1; }
  }

  map syntax Expressions.Expression.PreDecrement -> DotNet.Expr
  {
    PreDecrement { Expr1 -> Expr1; }
  }

  map syntax Expressions.Expression.SimpleName -> DotNet.Expr
  {
    SimpleName  { Reference -> Reference; }
  }

  map syntax Expressions.Expression.MemberAccess1 -> DotNet.Expr
  {
    MemberAccess1
    {
      Expr1 -> Expr1;
      Reference -> Reference;
    }
  }

  map syntax Expressions.Expression.MemberAccess2 -> DotNet.Expr
  {
    MemberAccess2
    {
      // PredefinedType -> TypeName;
      // QualifiedName -> QualifiedName;
    }
  }

  map syntax Expressions.Argument -> Argument
  {
    // TODO: Доделать поддержку именованных аргументов и out/ref-аргументов.
    | Ref    -> Expr.RefArgument { Expression -> Expr; match (ArgumentNameOpt) { | Some(name) -> OptionalName.Some { name.Reference -> Name; } | None -> OptionalName.None {} } -> ParameterNameOpt; } //= ArgumentName? Modfier="ref" sm Expression;
    | Out    -> Expr.OutArgument { Expression -> Expr; match (ArgumentNameOpt) { | Some(name) -> OptionalName.Some { name.Reference -> Name; } | None -> OptionalName.None {} } -> ParameterNameOpt; } //= ArgumentName? Modfier="out" sm Expression;
    | Simple -> Expr.Argument    { Expression -> Expr; match (ArgumentNameOpt) { | Some(name) -> OptionalName.Some { name.Reference -> Name; } | None -> OptionalName.None {} } -> ParameterNameOpt; } //= ArgumentName?                  Expression;
  }

  map syntax Expressions.Expression.Invocation -> DotNet.Expr
  {
    Invocation
    {
      LeftExpression  -> Left;
      Arguments.Item1 -> Arguments;
    }
  }

  map syntax Expressions.Expression.IndexerAccess -> DotNet.Expr
  {
    IndexerAccess
    {
      Expression      -> Left;
      Arguments.Item1 -> Arguments;
    }
  }

  map syntax Expressions.Expression.PostIncrement -> DotNet.Expr
  {
    PostIncrement { Expression -> Expr1; }
  }

  map syntax Expressions.Expression.PostDecrement -> DotNet.Expr
  {
    PostDecrement { Expression -> Expr1; }
  }

  map syntax AnonymousFunction.Expression.Lambda_SingleParam1 -> DotNet.Expr
  {
    Lambda
    {
      [LocalParameter.Implicit { Name -> Name; }] -> Parameters;
    }
  }

  map syntax AnonymousFunction.Expression.Lambda_ExplicitParams1 -> DotNet.Expr
  {
    Lambda_ExplicitParams1 { }
  }

  map syntax AnonymousFunction.Expression.Lambda_ImplicitParams1 -> DotNet.Expr
  {
    Lambda_ImplicitParams1 { }
  }

  map syntax AnonymousFunction.Expression.AnonymousFunction1 -> DotNet.Expr
  {
    AnonymousFunction1 { }
  }

  map syntax Async.Expression.Lambda_SingleParam2 -> DotNet.Expr
  {
    Lambda_SingleParam2 { }
  }

  map syntax Async.Expression.Lambda_ExplicitParams2 -> DotNet.Expr
  {
    Lambda_ExplicitParams2 { }
  }

  map syntax Async.Expression.Lambda_ImplicitParams3 -> DotNet.Expr
  {
    Lambda_ImplicitParams3 { }
  }

  map syntax Async.Expression.AnonymousFunction2 -> DotNet.Expr
  {
    AnonymousFunction2 { }
  }

  map syntax Async.Expression.Await -> DotNet.Expr
  {
    Await { }
  }

  map syntax Linq.Expression.Query -> DotNet.Expr
  {
    Query { }
  }

  map syntax Unsafe.Expression.StackallocInitializer -> DotNet.Expr
  {
    StackallocInitializer { }
  }

  map syntax Unsafe.Expression.NewArray_1 -> DotNet.Expr
  {
    NewArray_1 { }
  }

  map syntax Unsafe.Expression.NewArray_2 -> DotNet.Expr
  {
    NewArray_2 { }
  }

  map syntax Unsafe.Expression.Addressof -> DotNet.Expr
  {
    Addressof { }
  }

  map syntax Unsafe.Expression.PointerMemberAccess -> DotNet.Expr
  {
    PointerMemberAccess { }
  }

  map syntax ObjectAndCollectionInitializers.Expression.NewObject_3 -> DotNet.Expr
  {
    NewObject_3 { }
  }

  map syntax ObjectAndCollectionInitializers.Expression.NewObject_2 -> DotNet.Expr
  {
    NewObject_2 { }
  }

  map syntax CS6Expression.Expression.NameofExpression -> DotNet.Expr
  {
    NameofExpression { }
  }

  map syntax CS6Expression.Expression.InterpolatedRegularStringLiteral -> DotNet.Expr
  {
    String { InterpolatedRegularStringLiteral -> Value; }
  }

  map syntax CS6Expression.Expression.InterpolatedVerbatimStringLiteral -> DotNet.Expr
  {
    String { InterpolatedVerbatimStringLiteral -> Value; }
  }

  map syntax CS6Expression.Expression.NullConditional1 -> DotNet.Expr
  {
    NullConditional1 { }
  }

  map syntax CS6Expression.Expression.NullConditional2 -> DotNet.Expr
  {
    NullConditional2 { }
  }

  map syntax AnonymousType.Expression.NewAnonymous -> DotNet.Expr
  {
    AnonymousTypeInstantiation { }
  }

  //map syntax Expressions.Argument -> DotNet.Expr
  //{
  //  | Ref    ->
  //    Argument
  //    {
  //      Expression -> Expr;
  //      // ArgumentNameOpt -> Name;
  //      // Modifier -> Modifier;
  //    }
  //  | Out    ->
  //    Argument
  //    {
  //      Expression -> Expr;
  //      // ArgumentNameOpt -> Name;
  //      // Modifier -> Modifier;
  //    }
  //  | Simple ->
  //    Argument
  //    {
  //      Expression -> Expr;
  //      // ArgumentNameOpt -> Name;
  //      // Modifier -> Modifier;
  //    }
  //}
}
