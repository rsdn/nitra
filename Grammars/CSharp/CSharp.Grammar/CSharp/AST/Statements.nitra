using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System;
using System.Globalization;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using Nitra;
using Nitra.Declarations;
using DotNet;

namespace DotNet
{
  ast EmptyStatement : Statement
  {
  }

  ast BlockStatement : Statement
  {
    LocalVarsScopeIn = null;

    Statements.LocalVarsScopeIn = LocalVarsScopeIn;
    Statements.ParameterScope   = ParameterScope;
    Statements.ScopeIn          = ScopeIn;
    ScopeOut                    = Statements.ScopeIn;

    Statements : Statement*;
  }

  ast LocalVarsStatement : Statement
  {
    LocalVars.ContainingTable = LocalVarsScopeOut;
    LocalVars.Scope           = ScopeIn;
    LocalVarsScopeOut         = TableScope("LocalVarsScope");
    ScopeOut                  = ScopeIn.HideWith(LocalVarsScopeOut);

    LocalVars : LocalVar*;
  }

  declaration LocalVar : TypedDeclaration
  {
    symbol
    {
      Kind      = "variable";
      SpanClass = DotNetLang.VariableSpanClass;
    }
    in Scope : Scope;
    in TypeRef : Ref[TypeSymbol];

    Type.Scope = Scope;
    Expression.ScopeIn = Scope;
    //Expression.BuildInvocationScope = ???;
    // The type of a local variable can be shared between two declarations.
    // Use ResolveOrCopy() method to avoid multiple type resolutions.
    TypeRef = Type.Ref.ResolveOrCopy();
    Symbol.Scope = TypeRef.Scope;
    Symbol.Type  = TypeRef.Symbol;
    Expression.ExpectedType = Symbol.Type;

    Type : QualifiedReference;
    Expression : Expr;
  }

  ast TupleDeconstruction : Statement
  {
    // TODO: Implement...
  }

  ast ExpressionStatement : Statement
  {
    Expr.ScopeIn = ScopeIn;
    //Expr.BuildInvocationScope = ???;
    Expr.ExpectedType = Expr.Type; // В C# допускается игнорировать возвращаемые значения. После типизации такие случаи можно превратить в ворнинги.

    Expr : Expr;
  }

  ast WhileStatement : Statement
  {
    Condition.ScopeIn        = ScopeIn;
    Condition.ExpectedType   = context.GetBooleanType();

    Statement.ScopeIn        = Condition.ScopeOut;
    Statement.ParameterScope = ParameterScope;
    ScopeOut                 = Statement.ScopeIn;

    Condition : Expr;
    Statement : Statement;
  }

  ast IfStatement : Statement
  {
    Condition.ScopeIn        = ScopeIn;
    Condition.ExpectedType   = context.GetBooleanType();

    Statement.ScopeIn        = Condition.ScopeOut;
    Statement.ParameterScope = ParameterScope;
    ScopeOut                 = Statement.ScopeIn;

    Condition : Expr;
    Statement : Statement;
  }
}
