using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;

namespace Nitra
{
  public module ParseUtils
  {
    public MakeRealLiteral(parseTree : Nitra.ParseTree, span : NSpan) : ParsedValue[RealLiteralValue]
    {
      def loc = Location(parseTree.Location.Source, span);
      def value =
        if (span.IsEmpty)
          RealLiteralValue.None(loc)
        else
        try
        {
          def text = parseTree.GetText(span).RemoveChar('_');
          def last = text.Last();

          match (last)
          {
            | 'F' | 'f' => RealLiteralValue.Single (loc, float.Parse  (text.Substring(0, text.Length-1), CultureInfo.InvariantCulture))
            | 'M' | 'm' => RealLiteralValue.Decimal(loc, decimal.Parse(text.Substring(0, text.Length-1), CultureInfo.InvariantCulture))
            | _         => RealLiteralValue.Double (loc, double.Parse (text, CultureInfo.InvariantCulture))
          }
        }
        catch { _ is OverflowException => RealLiteralValue.Overflow(loc) } ;

      ParsedValue(parseTree.Span, value)
    }

    public MakeIntegerLiteral(parseTree : Nitra.ParseTree, digits : NSpan, suffixOpt : NSpan, radix : int) : ParsedValue[IntegerLiteralValue]
    {
      def value =
        if (digits.IsEmpty)
          IntegerLiteralValue()
        else
        {
          mutable isOverflow;
          def value =
            try StrToInt(parseTree, digits, radix)
            catch
            { _ is OverflowException =>
              isOverflow = true;
              0UL
            };
          mutable isLong;
          mutable isUnsigned;
          when (!suffixOpt.IsEmpty)
          {
            def suffix = parseTree.GetText(suffixOpt);
            isLong = suffix.IndexOf('L') >= 0 || suffix.IndexOf('l') >= 0;
            isUnsigned = suffix.IndexOf('U') >= 0 || suffix.IndexOf('u') >= 0;
          }
          IntegerLiteralValue(parseTree.Location, value, isUnsigned, isLong, isOverflow, radix)
        };

      ParsedValue(parseTree.Span, value)
    }

    public StrToInt(parseTree : Nitra.ParseTree, span : NSpan, radix : int) : ulong
    {
      StrToInt(parseTree, span.StartPos, span.EndPos, radix)
    }

    public StrToInt(parseTree : Nitra.ParseTree, startPos : int, endPos : int, radix : int) : ulong
    {
      assert2(startPos < endPos);

      def text = parseTree.Location.Source.OriginalText;
      mutable result = CharToDigit(text[startPos]) : ulong;

      for (mutable i = startPos + 1; i < endPos; i++)
        checked result = (result * (radix :> ulong)) + CharToDigit(text[i]);

      result
    }

    private CharToDigit(c : char) : uint
    {
      | c when '0' <= c && c <= '9' => c : uint - '0' : uint
      | c when 'a' <= c && c <= 'f' => c : uint - 'a' : uint + 10
      | c when 'A' <= c && c <= 'F' => c : uint - 'A' : uint + 10
      | _ => 0U
    }

    public RemoveChar(this input : string, toRemove : char) : string
    {
      if (input.IndexOf(toRemove) < 0)
        input
      else
      {
        mutable toRemoveCount = 0;
        foreach (ch when ch == toRemove in input)
          toRemoveCount++;

        def builder = Text.StringBuilder(input.Length - toRemoveCount);
        foreach (ch when ch != toRemove in input)
          _ = builder.Append(ch);
        builder.ToString()
      }
    }
  }
}
