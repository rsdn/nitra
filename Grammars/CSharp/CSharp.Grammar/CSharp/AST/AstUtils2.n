using DotNet;

using Nitra;
using Nitra.Declarations;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Extensions;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;

namespace DotNet
{
  public module Coverters
  {
    public MakeDefaultParametersOpt(ast : ExprBase) : ValueOption[DefaultValue]
    {
      VSome(MakeDefaultParameters(ast))
    }
    
    public MakeDefaultParameters(ast : ExprBase) : DefaultValue
    {
      | _ is Expr.Nop                     => DefaultValue.None()
      | lit is DotNet.Expr.String         => ConvertStringLiteral(lit.Value)
      | lit is DotNet.Expr.BooleanLiteral => DefaultValue.Bool(lit.Value.ValueOrDefault)
      | lit is DotNet.IntegerLiteral when lit.Value.Value.Overflow => DefaultValue.Overflow()
      | lit is DotNet.IntegerLiteral with x = lit.Value.Value => DefaultValue.Number(x.Value, x.IsUnsigned, x.IsLong)
      | _   is DotNet.Expr.NullLiteral    => DefaultValue.Null()
      | lit is DotNet.RealLiteral =>
        match (lit.Value.Value)
        {
          | x is Nitra.RealLiteralValue.Single   => DefaultValue.Single (x.Value)
          | x is Nitra.RealLiteralValue.Double   => DefaultValue.Double (x.Value)
          | x is Nitra.RealLiteralValue.Decimal  => DefaultValue.Decimal(x.Value)
          | _ is Nitra.RealLiteralValue.Overflow => DefaultValue.Overflow()
          | _                                    => DefaultValue.Error()
        }
      | _ => DefaultValue.Error()
    }

    public ConvertStringLiteral(str : CSharp.StringLiteral) : DefaultValue
    {
      def builder = Text.StringBuilder();
      foreach (part in str.Parts)
      {
        | Interpolation           => ()
        | InterpolationFormated   => ()
        | InterpolatedOpenEscape  => _ = builder.Append("{");
        | InterpolatedCloseEscape => _ = builder.Append("}");
        | Error                   => ()
        | SimpleEscape            => _ = builder.Append(part.Location.GetText()); // FIXME:
        | UnicodeEscape           => _ = builder.Append(part.Location.GetText()); // FIXME:
        | HexadecimalEscape       => _ = builder.Append(part.Location.GetText()); // FIXME:
        | RegulaChars             => _ = builder.Append(part.Location.GetText());
        | VerbatimEscape          => _ = builder.Append(part.Location.GetText()); // FIXME:
        | _                       => ()
      }

      DefaultValue.String(builder.ToString())
    }
  }

  public module AstUtils2
  {
    public GetMemberReturnType(this member : DeclarationSymbol, context : DependentPropertyEvalContext) : TypeSymbol
    {
      match (member)
      {
        | x is Member.PropertySymbol => x.Type
        | x is Member.MethodSymbol   => x.ReturnType
        | x is Member.FieldSymbol    => x.Type
        | x is Member.ConstantSymbol => x.Type
        | x is LocalParameterSymbol  => x.Type
        | x is EnumMemberSymbol      => x.DeclaredIn
        | TypeSymbol                 => GetPlatformType(context).Type;
        | _                          => context.CreateFreeTypeVar()
      }
    }

    public GetOverloadedMemberType(this context : DependentPropertyEvalContext, memberCandidats : ImmutableArray[DeclarationSymbol]) : TypeSymbol
    {

      def memberCount = memberCandidats.Length;
      match (memberCount)
      {
        | 0 => CreateFreeTypeVar(context)
        | 1 =>
          match (memberCandidats[0])
          {
            | x is TypedDeclarationSymbol when x.IsTypeEvaluated       => x.Type
            | x is EnumMemberSymbol       when x.IsDeclaredInEvaluated => x.DeclaredIn
            | _                                                       => context.GetVoidType()
          }
        | _ =>
          mutable methodsCount;
          mutable returnType;
          mutable sameReturnType = true;
          foreach (candidat in memberCandidats)
          {
            | m is Member.MethodSymbol =>
              methodsCount++;
              if (returnType == null && m.IsReturnTypeEvaluated)
                returnType = m.ReturnType;
              else when (m.IsReturnTypeEvaluated && !returnType.Equals(m.ReturnType))
                  sameReturnType = false;

            | _ => ()
          }
          when (returnType == null)
            returnType = CreateFreeTypeVar(context);

          if (methodsCount == memberCount)
          {
            if (sameReturnType)
              CreateFunctionTypeSymbol(context, returnType)
            else
              CreateFunctionTypeSymbol(context)
          }
          else
            CreateFreeTypeVar(context)
      }
    }

    public CreateFreeTypeVar(this _context : DependentPropertyEvalContext) : TypeSymbol { TypeUnifier.Instance.CreateFreeTypeVar() }
    
    public CreateFreeTypeVars(this _context : DependentPropertyEvalContext, count : int) : ImmutableArray[TypeSymbol]
    {
      match (count)
      {
        | 0 => ImmutableArray.Empty
        | 1 => ImmutableArray.Create(_context.CreateNullTypeVar())
        | 2 => ImmutableArray.Create(_context.CreateNullTypeVar(), _context.CreateNullTypeVar())
        | 3 => ImmutableArray.Create(_context.CreateNullTypeVar(), _context.CreateNullTypeVar(), _context.CreateNullTypeVar())
        | 4 => ImmutableArray.Create(_context.CreateNullTypeVar(), _context.CreateNullTypeVar(), _context.CreateNullTypeVar(), _context.CreateNullTypeVar())
        | _ =>
          def builder = ImmutableArray.CreateBuilder(count);
          for (mutable i = 0; i < count; i++)
            builder.Add(_context.CreateNullTypeVar());
          builder.MoveToImmutable()
      }
    }

    public CreateNullTypeVar(this _context : DependentPropertyEvalContext) : TypeSymbol
    {
      // TODO: Добавить Reference Type Constraint
      TypeUnifier.Instance.CreateFreeTypeVar()
    }

    public CreateFunctionTypeSymbol(this context : DependentPropertyEvalContext, returnType : TypeSymbol) : FunctionTypeSymbol
    {
      def type = FunctionTypeSymbol();
      type.Return = returnType;
      type.EvalProperties(context);
      type
    }

    public CreateFunctionTypeSymbol(this context : DependentPropertyEvalContext) : FunctionTypeSymbol
    {
      def type = FunctionTypeSymbol();
      type.EvalProperties(context);
      type
    }

    public CreateFunctionTypeSymbol(this context : DependentPropertyEvalContext, returnType : TypeSymbol, parameters : ImmutableArray[TypeSymbol]) : FunctionTypeSymbol
    {
      def type = FunctionTypeSymbol();
      type.Return = returnType;
      type.Parameters = parameters;
      type.EvalProperties(context);
      type
    }

    public CreateFunctionTypeSymbol(this context : DependentPropertyEvalContext, parameters : ImmutableArray[TypeSymbol]) : FunctionTypeSymbol
    {
      def type = FunctionTypeSymbol();
      type.Parameters = parameters;
      type.EvalProperties(context);
      type
    }

    public GetBackEnd(this context : DependentPropertyEvalContext) : IDotNetBackEnd
    {
      (context.Project.Data :> DotNetProjectData).BackEnd
    }

    public GetPlatformType(this context : DependentPropertyEvalContext) : IPlatformType
    {
      GetBackEnd(context).PlatformType
    }

    public GetStringType(this context : DependentPropertyEvalContext) : TypeSymbol
    {
      GetPlatformType(context).String
    }

    public GetCharType(this context : DependentPropertyEvalContext) : TypeSymbol
    {
      GetPlatformType(context).Char
    }

    public GetInt32Type(this context : DependentPropertyEvalContext) : TypeSymbol
    {
      GetPlatformType(context).Int32
    }

    public GetDoubleType(this context : DependentPropertyEvalContext) : TypeSymbol
    {
      GetPlatformType(context).Double
    }

    public GetSingleType(this context : DependentPropertyEvalContext) : TypeSymbol
    {
      GetPlatformType(context).Single
    }

    public GetDecimalType(this context : DependentPropertyEvalContext) : TypeSymbol
    {
      GetPlatformType(context).Decimal
    }

    public GetBooleanType(this context : DependentPropertyEvalContext) : TypeSymbol
    {
      GetPlatformType(context).Boolean
    }

    public GetObjectType(this context : DependentPropertyEvalContext) : TypeSymbol
    {
      GetPlatformType(context).Object
    }

    public GetVoidType(this context : DependentPropertyEvalContext) : TypeSymbol
    {
      GetPlatformType(context).Void
    }

    public GetTypeType(this context : DependentPropertyEvalContext) : TypeSymbol
    {
      GetPlatformType(context).Type
    }

    //public GetBindingBaseType(this context : DependentPropertyEvalContext) : TypeSymbol
    //{
    //  (context :> AmmyDependentPropertyEvalContext).Types.BindingBase;
    //  GetBackEnd(context).PlatformType.Char
    //}

    //public GetBindingType(this context : DependentPropertyEvalContext) : TypeSymbol
    //{
    //  (context :> AmmyDependentPropertyEvalContext).Types.Binding;
    //  GetBackEnd(context).PlatformType.Char
    //}

    //public GetBindingTypeScope(this context : DependentPropertyEvalContext) : Scope
    //{
    //  (context :> AmmyDependentPropertyEvalContext).Types.Binding.Scope;
    //  GetBackEnd(context).PlatformType.Char
    //}

    public IsNumeric(this symbol : TypeSymbol, context : DependentPropertyEvalContext) : bool
    {
      match (symbol)
      {
        | null => false
        | x when x.Id == context.GetPlatformType().SByte.Id
        | x when x.Id == context.GetPlatformType().Int16.Id
        | x when x.Id == context.GetPlatformType().Int32.Id
        | x when x.Id == context.GetPlatformType().Int64.Id
        | x when x.Id == context.GetPlatformType().UInt16.Id
        | x when x.Id == context.GetPlatformType().UInt32.Id
        | x when x.Id == context.GetPlatformType().UInt64.Id
        | x when x.Id == context.GetPlatformType().Double.Id
        | x when x.Id == context.GetPlatformType().Single.Id
        | x when x.Id == context.GetPlatformType().Single.Id
        | x when x.Id == context.GetPlatformType().Byte.Id => true
        | _ => false
      }
    }

    public HasImplicitConversion(this from : TypeSymbol, to : TypeSymbol, context : DependentPropertyEvalContext) : bool
    {
      def char = context.GetVoidType().FullName;
      def byte = context.GetVoidType().FullName;
      def sbyte = context.GetVoidType().FullName;
      def short = context.GetVoidType().FullName;
      def ushort = context.GetVoidType().FullName;
      def int = context.GetVoidType().FullName;
      def uint = context.GetVoidType().FullName;
      def long = context.GetVoidType().FullName;
      def ulong = context.GetVoidType().FullName;
      def float = context.GetVoidType().FullName;
      def double = context.GetVoidType().FullName;
      def decimal = context.GetVoidType().FullName;

      match(from)
      {
        | x when !x.IsFullNameEvaluated => false
        | x when x.FullName == sbyte => [short, int, long, float, double, decimal].Any(s => s == to.FullName)
        | x when x.FullName == byte => [short, ushort, int, uint, long, ulong, float, double, decimal].Any(s => s == to.FullName)
        | x when x.FullName == short => [int, long, float, double, decimal].Any(s => s == to.FullName)
        | x when x.FullName == ushort => [int, uint, long, ulong, float, double, decimal].Any(s => s == to.FullName)
        | x when x.FullName == int => [long, float, double, decimal].Any(s => s == to.FullName)
        | x when x.FullName == uint => [long, ulong, float, double, decimal].Any(s => s == to.FullName)
        | x when x.FullName == long => [float, double, decimal].Any(s => s == to.FullName)
        | x when x.FullName == ulong => [float, double, decimal].Any(s => s == to.FullName)
        | x when x.FullName == char => [ushort, int, uint, long, ulong, float, double, decimal].Any(s => s == to.FullName)
        | x when x.FullName == float => [double].Any(s => s == to.FullName)
        | _ => false
      }
    }

    public mutable ExtensionScopeFactory : Scope -> ScopeFactory = CreateExtensionScopeFactory;

    public CreateExtensionScopeFactory(_scope : Scope) : ScopeFactory
    {
      def self(scope : Scope)
      {
        scope
      }

      self
    }
  } // module
} // namespace
