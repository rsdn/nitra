using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Xml.Serialization;

namespace Nitra.ClientServer.Messages
{
  public sealed class Language
  {
    [XmlAttribute] public Name: string { get; set }
    [XmlAttribute] public Path: string { get; set }
    public DynamicExtensions: array[DynamicExtension] { get; set }
    public Libs: array[string] { get; set }
  }

  public sealed class DynamicExtension
  {
    [XmlAttribute] public Name : string { get; set }
    [XmlAttribute] public Path : string { get; set }

    public ToDynamicExtensionInfo(rootPath : string) : Messages.DynamicExtensionInfo
    {
      Messages.DynamicExtensionInfo(Name, Path.GetFullPath(Path.Combine(rootPath, Path)))
    }
  }

  public module SerializationHelper
  {
    _configXmlSerializer   : XmlSerializer = XmlSerializer(typeof(Messages.Config));
    _languageXmlSerializer : XmlSerializer = XmlSerializer(typeof(Language));

    public Serialize(config : Messages.Config) : string
    {
      def writer = StringWriter();
      _configXmlSerializer.Serialize(writer, config);
      writer.ToString()
    }

    public Deserialize(configPath : string) : Messages.Config
    {
      def text   = File.ReadAllText(configPath);
      def reader = StringReader(text);

      def result   =
        try _configXmlSerializer.Deserialize(reader) :> Messages.Config
        catch
        { | _e is InvalidOperationException =>
          // Try interpret config as old version. Try to read "Language" type
          def reader = StringReader(text);
          def lang = _languageXmlSerializer.Deserialize(reader) :> Language;
          // Convert it to new format (Messages.Config type)
          def dynExt = lang.DynamicExtensions?.Select(e => Messages.DynamicExtensionInfo(e.Name, e.Path))?.ToArray();
          def langInfo = Messages.LanguageInfo(lang.Name, lang.Path, dynExt ?? array(0));
          def result = Messages.Config(Messages.ProjectSupport("", "", ""), array[langInfo], lang.Libs?.ToArray() ?? array(0));
          File.WriteAllText(configPath, Serialize(result));
          Deserialize(configPath)
        };
      result
    }
  }
}
