using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.ClientServer.Server.ServerUtils;
using Nitra.Declarations;
using Nitra.Logging;
using Nitra.PrettyPrint;
using Nitra.ProjectSystem;

using Nitra.Runtime.Highlighting;
using System;
using System.Collections.Concurrent;
using System.Collections.Immutable;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading;

using NSP = Nitra.ProjectSystem;
using SCG = System.Collections.Generic;
using R   = Nitra.Runtime.Reflection;

namespace Nitra.ClientServer.Server
{
  abstract class Worker : IDisposable
  {
    _thread               : Thread;
    _cts                  : CancellationTokenSource = CancellationTokenSource();
    _incomeQueue          : BlockingCollection[ParserMessage];
    _mainQueue            : BlockingCollection[RouterMessage];
    _asyncResponseWriter  : BinaryWriter;
    _spanClassesManager   : SpanClassesManager;
    _router               : Router;

    public this(router : Router, incomeQueue : BlockingCollection[ParserMessage], mainQueue : BlockingCollection[RouterMessage], responseWriter : BinaryWriter, spanClassesManager : SpanClassesManager)
    {
      _router              = router;
      _mainQueue           = mainQueue;
      _incomeQueue         = incomeQueue;
      _asyncResponseWriter = responseWriter;
      _spanClassesManager  = spanClassesManager;
      _thread              = Thread(ParseWorkerMain, StackSize);
      _thread.Start();
    }

    protected virtual StackSize : int { get { 0 } }

    SendAsyncResponse(msg : AsyncServerMessage) : void
    {
      lock (_asyncResponseWriter)
        msg.Serialize(_asyncResponseWriter);
    }

    ParseWorkerMain() : void
    {
      def thread = Thread.CurrentThread;
      thread.Name = "Parse Worker";
      thread.CurrentCulture = CultureInfo.InvariantCulture;
      while (!_mainQueue.IsCompleted)
      {
        try
        {
          foreach(m in _incomeQueue.GetConsumingEnumerable(_cts.Token))
          {
            try
              ProcessMessage(m)
            catch
            {
              | e is OperationCanceledException => Log.Canceled(e);
              | e => ServerUtils.LogException(_asyncResponseWriter, e);
            }
          }
        }
        catch
        {
          | _ is ObjectDisposedException when _cts.IsCancellationRequested => return;
          | e is OperationCanceledException => Log.Canceled(e);
          | e => ServerUtils.LogException(_asyncResponseWriter, e);
        }
      }
    }

    ProcessMessage(msg : ParserMessage) : void
    {
      | ParseFile(solutionId, projectId, fileId, parseSession, source) =>
        Log.Message("ParseFile " + fileId);
        def timer = Stopwatch.StartNew();
        // TODO: add statistics
        //def stat = Statistics;
        //stat?.Parse?.Restart();
        //
        //_parseMessages.Clear();
        //_astMessages.Clear();
        //_typingMessages.Clear();

        when (parseSession.CancellationToken.IsCancellationRequested)
          return;

        def isCompleteWord = parseSession.CompletionPos >= 0;

        def parseResult = parseSession.Parse(source);

        when (isCompleteWord)
        {
          assert(true);
        }

        _mainQueue.Add(RouterAnswerMessage.FileParsed(projectId, fileId, parseResult));

        unless (isCompleteWord)
          ServerUtils.SendCompilerMessages(parseResult, _router, solutionId, projectId, fileId);

        ServerUtils.LogMsgHandled("ParseFile " + fileId + " Length=" + parseResult.SourceSnapshot.Text.Length, timer, 200);

      | CreateAst(solutionId, projectId, fileId, parseResult, isActive) =>
        Log.Message("CreateAst " + fileId);
        def timer = Stopwatch.StartNew();
        when (parseResult.ParseSession.CancellationToken.IsCancellationRequested)
          return;

        def parseTree = parseResult.CreateParseTree();
        def mappingMessages = CompilerMessageList();
        def ast = AstContext.GetAstUntyped(parseTree, mappingMessages);
        def completionPos = parseResult.CompletionPos;
        _mainQueue.Add(RouterAnswerMessage.AstCreated(projectId, fileId, parseResult.ParseSession.CancellationToken, ast, parseTree, completionPos, parseResult));

        def version = FileVersion(parseResult.SourceSnapshot.Version);
        def cm      = ConvertCompilerMessages(CompilerMessageSource.Mapping, mappingMessages);

        when (completionPos < 0)
          SendAsyncResponse(AsyncServerMessage.MappingMessages(fileId, version, solutionId, projectId, cm));

        ServerUtils.LogMsgHandled("CreateAst " + fileId, timer, 100);

        unless (isActive)
          return;

        def prettyPrintState = _router.PrettyPrintState;
        when (prettyPrintState != PrettyPrintState.Disabled)
          ProcessMessage(ParserMessage.CreatePrettyPrint(solutionId, projectId, fileId, version, prettyPrintState, parseTree));
        when (_router.IsParseTreeReflectionEnable)
          ProcessMessage(ParserMessage.CreateParseTreeReflection(solutionId, projectId, fileId, version, parseResult));

      | CreatePrettyPrint(solutionId, projectId, fileId, version, prettyPrintState, parseTree) =>
        match (prettyPrintState)
        {
          | PrettyPrintState.Disabled => ()
          | PrettyPrintState.Html =>
            Log.Message("HtmlPrettyPrint " + fileId);
            def timer = Stopwatch.StartNew();
            def spanClasses = _spanClassesManager.GetSpanClasses();
            def htmlWriter = HtmlPrettyPrintWriter(PrettyPrintOptions.DebugIndent | PrettyPrintOptions.MissingNodes, spanClasses, "missing", "debug", "garbage");
            parseTree.PrettyPrint(htmlWriter, 0, null);
            def text = htmlWriter.ToString();
            _router.SendAsyncResponse(AsyncServerMessage.PrettyPrintCreated(fileId, version, solutionId, PrettyPrintState.Html, text));
            ServerUtils.LogMsgHandled("HtmlPrettyPrint " + fileId, timer, 100);

          | PrettyPrintState.Text =>
            Log.Message("TextPrettyPrint " + fileId);
            def timer = Stopwatch.StartNew();
            def text = parseTree.ToString(PrettyPrintOptions.DebugIndent | PrettyPrintOptions.MissingNodes);
            _router.SendAsyncResponse(AsyncServerMessage.PrettyPrintCreated(fileId, version, solutionId, PrettyPrintState.Text, text));
            ServerUtils.LogMsgHandled("TextPrettyPrint " + fileId, timer, 100);
        }

      | ParserMessage.CreateParseTreeReflection(solutionId, projectId, fileId, version, parseResult) =>
        Log.Message("ParseTreeReflection " + fileId);
        def timer = Stopwatch.StartNew();
        def root  = parseResult.Reflect();
        def convertedRoot = ConvertParseTreeReflection(root, Hashtable());
        _router.SendAsyncResponse(AsyncServerMessage.ReflectionStructCreated(fileId, version, solutionId, convertedRoot));
        ServerUtils.LogMsgHandled("ParseTreeReflection " + fileId, timer, 100);

      | SemanticAnalysisStart(solutionId, projectId, cancellationToken, project, projectSupport, files, data, completeWordFileIdOpt, completeWordPosOpt, parseResultOpt) =>
        when (project.Data == null)
        {
          Log.Message("Project support: RefreshReferences " + project.Name + " ");
          def timer = Stopwatch.StartNew();
          def messages = project.CompilerMessages :> NSP.CompilerMessageList;
          messages.Clear();
          def data =
            try projectSupport.RefreshReferences(cancellationToken, project)
            catch
            {
              | e is OperationCanceledException => Log.Canceled(e); null
              | e =>
                Log.Exception(e);
                SendAsyncResponse(AsyncServerMessage.RefreshReferencesFailed(FileId.Invalid, FileVersion.Invalid, solutionId, e.ToString()));
              null
            };

          project.Data = data;

          //Router.ProjectLoadFinish();

          def cm = ServerUtils.ConvertCompilerMessages(CompilerMessageSource.ProjectLoading, messages);
          SendAsyncResponse(AsyncServerMessage.ProjectLoadingMessages(FileId.Invalid, FileVersion.Invalid, solutionId, projectId, cm));

          LogMsgHandled("RefreshReferences " + project.Name + " ", timer, 1000);

          when (data == null)
            return;
        }
        Log.Message($<#SemanticAnalysisStart: $(if (completeWordPosOpt < 0) "CompletePos" + completeWordPosOpt else "") ..$(files.Select(_.Title))#>);
        def timer = Stopwatch.StartNew();
        try
        {
          foreach (file in files)
            file.Ast.DeepResetProperties();

          projectSupport.RefreshProject(cancellationToken, files, data);
        }
        catch
        {
          | e is OperationCanceledException => Log.Canceled(e); throw;
          | e when completeWordPosOpt < 0 => SendAsyncResponse(AsyncServerMessage.RefreshProjectFailed(FileId.Invalid, FileVersion.Invalid, solutionId, e.ToString())); throw
        }

        when (cancellationToken.IsCancellationRequested)
          return;

        def isCompleteWord = completeWordPosOpt >= 0 && completeWordFileIdOpt.IsValid;

        when (isCompleteWord)
        {
          // word complete
          foreach (file when file.FileId == completeWordFileIdOpt in files)
          {
            CompleteWord(solutionId, completeWordPosOpt, file, parseResultOpt);
            break;
          }
        }

        when (cancellationToken.IsCancellationRequested)
          return;

        _mainQueue.Add(RouterAnswerMessage.SemanticAnalysisFinished(projectId, cancellationToken, files, completeWordFileIdOpt, completeWordPosOpt));

        unless (isCompleteWord)
        {
          def empty = array(0);
          for (mutable i = 0; i < files.Length; i++)
          {
            def file = files[i];
            if (file.HasCompilerMessage)
            {
              def msgs = file.GetCompilerMessage();
              def cm   = ConvertCompilerMessages(CompilerMessageSource.SemanticAnalysis, msgs);
              SendAsyncResponse(AsyncServerMessage.SemanticAnalysisMessages(FileId(file.FileId), FileVersion(file.FileVersion), solutionId, projectId, cm));
            }
            else
              SendAsyncResponse(AsyncServerMessage.SemanticAnalysisMessages(FileId(file.FileId), FileVersion(file.FileVersion), solutionId, projectId, empty));
          }
        }

        ServerUtils.LogMsgHandled("SemanticAnalysisStart", timer, 100);

      | CreateOutlining(solutionId, projectId, fileId, parseResult) =>
        Log.Message("CreateOutlining " + fileId);
        def timer     = Stopwatch.StartNew();
        def outlining = List();
        parseResult.GetOutlining(outlining);
        def infos             = ImmutableArray.CreateBuilder(outlining.Count);
        def cancellationToken = parseResult.ParseSession.CancellationToken;
        def version           = FileVersion(parseResult.SourceSnapshot.Version);

        foreach (info in outlining with i)
        {
          when (i % 30 == 0 && cancellationToken.IsCancellationRequested)
            return;

          infos.Add(Messages.OutliningInfo(ConvertNSpan(info.Span), info.IsDefaultCollapsed, info.IsImplementation));
        }

        when (cancellationToken.IsCancellationRequested)
          return;

        infos.Sort(OutliningInfo.Comparer);
        SendAsyncResponse(AsyncServerMessage.OutliningCreated(fileId, version, solutionId, projectId, infos.MoveToImmutable()));
        ServerUtils.LogMsgHandled("CreateOutlining", timer, 50);

      | CreateKeywordsHighlighting(solutionId, projectId, fileId, parseResult) =>
        Log.Message("CreateKeywordsHighlighting " + fileId);
        def timer     = Stopwatch.StartNew();
        def start     = 0;
        def end       = parseResult.SourceSnapshot.Text.Length;
        def spanInfos = HashSet();
        parseResult.GetSpans(start, end, spanInfos);

        def infos             = ImmutableArray.CreateBuilder(spanInfos.Count);
        def cancellationToken = parseResult.ParseSession.CancellationToken;
        def version           = FileVersion(parseResult.SourceSnapshot.Version);

        foreach (info in spanInfos with i)
        {
          when (i % 30 == 0 && cancellationToken.IsCancellationRequested)
            return;

          def span = info.Span;
          def id = _spanClassesManager[info.SpanClass];
          infos.Add(SpanInfo(ConvertNSpan(span), id));
        }

        when (cancellationToken.IsCancellationRequested)
          return;

        infos.Sort(SpanInfo.Comparer);
        SendAsyncResponse(AsyncServerMessage.KeywordsHighlightingCreated(fileId, version, solutionId, projectId, infos.MoveToImmutable()));
        ServerUtils.LogMsgHandled("CreateKeywordsHighlighting", timer, 50);

      | CreateSymbolsHighlighting(solutionId, projectId, fileId, version, ast, completeWordPosOpt) =>
        Log.Message($"CreateSymbolsHighlighting(solutionId=$solutionId, projectId=$projectId, fileId=$fileId, version=$version,  completeWordPosOpt=$completeWordPosOpt)");
        def timer   = Stopwatch.StartNew();
        def visitor = CollectSymbolsAstVisitor(_spanClassesManager, completeWordPosOpt);
        ast.Accept(visitor);
        SendAsyncResponse(AsyncServerMessage.SymbolsHighlightingCreated(fileId, version, solutionId, projectId, visitor.GetSpanInfos()));
        ServerUtils.LogMsgHandled("CreateSymbolsHighlighting", timer, 50);

      | SemanticAction(solutionId, action, cancellationToken, asts) => action(cancellationToken, solutionId, asts)
      | CreateMatchBrackets(solutionId, projectId, fileId, parseResult, pos) =>
        def timer   = Stopwatch.StartNew();
        def walker  = MatchBracketsWalker();
        def context = MatchBracketsWalker.Context(pos);
        walker.Walk(parseResult, context);
        def builder = ImmutableArray.CreateBuilder(context.Brackets.Count);
        foreach (pair in context.Brackets)
          builder.Add(MatchBrackets(ConvertNSpan(pair.OpenBracket), ConvertNSpan(pair.CloseBracket)));
        def msg = AsyncServerMessage.MatchedBrackets(fileId, FileVersion(parseResult.SourceSnapshot.Version), solutionId, projectId, builder.MoveToImmutable());
        SendAsyncResponse(msg);
        ServerUtils.LogMsgHandled("CreateMatchBrackets fileId=" + fileId, timer, 50);
    }

    public CompleteWord(solutionId : SolutionId, pos : int, fileData : FileEvalPropertiesData, parseResult : IParseResult) : void
    {
      def astRoot = fileData.Ast;
      def source  = astRoot.Location.Source;

      // находим цепочку ветвей AST ведущую к позиции комплита

      def visitor = FindReferencesAstVisitor(NSpan(pos, pos));
      astRoot.Accept(visitor);

      Log.Message($"CompleteWord processed file=$(fileData.FileId) ver=$(fileData.FileVersion) pos=$pos");

      def isReference((ast : IAst, steack : array[IAst])) : bool
      {
        | (Reference as r, steack) => r.Span.IntersectsWith(pos)
        | _ => false
      }

      def isNotEmptyReference((ast : IAst, steack : array[IAst])) : bool
      {
        | (Reference as r, steack) => r.Span.IntersectsWith(pos) && !r.Span.IsEmpty
        | _ => false
      }

      // TODO: искать снача нормальй Reference, и только если его нет, то продолбанный.
      def (reference, steack) =
        if (visitor.Result.Any(isNotEmptyReference))
          visitor.Result.FirstOrDefault(isNotEmptyReference)
        else
          visitor.Result.FirstOrDefault(isReference);

      foreach ((r, steack) in visitor.Result)
      {
        Debug.WriteLine("------------------------------");
        Debug.WriteLine("'" + r.Location.GetText() + "'");
        mutable prefix = "..";
        foreach (e in steack)
        {
          Debug.WriteLine(prefix + "'" + e.Location.GetText().Replace("\r\n", " ") + "' - " + e.GetType().Name + " - " + e.GetType().FullName);
          prefix += "..";
        }
      }

      mutable replacementSpan = NSpan(pos);

      def matchedKeyWordsMap = Hashtable();

      foreach (keyword in parseResult.Keywords)
      {
        def literal = keyword.Keyword.Str;

        when (pos < keyword.StartPos || pos >= keyword.StartPos + literal.Length)
          continue;

        def pattern = source.Text.Substring(keyword.StartPos, pos - keyword.StartPos);

        when (pattern.Length == 0 || StringPatternMatching.MatchPattern(literal, pattern))
        {
          replacementSpan = NSpan(keyword.StartPos, pos);
          mutable desc;
          if (matchedKeyWordsMap.TryGetValue(literal, out desc))
            matchedKeyWordsMap[literal] = desc + Environment.NewLine + keyword.Keyword.Owner.Description;
          else
            matchedKeyWordsMap[literal] = keyword.Keyword.Owner.Description;
        }
      }

      def symbolsSet = HashSet.[DeclarationSymbol]();

      when (reference != null)
      {
        // Вычисляем префикс комплита (если есть). Он будет использоваться для фильтрации списка и будет заменен выбранным словом
        def startPos        = reference.Span.StartPos;
        def span            = Nitra.NSpan(reference.Span.StartPos, pos);
        def pattern         = source.Text.Substring(span.StartPos, span.Length);
        def pattern         = pattern;
        def isPatternEmpty  = pattern.Length == 0;
        replacementSpan = Nitra.NSpan(reference.Span.StartPos, reference.Span.EndPos);

        Log.Message($"    replacementSpan=$replacementSpan pattern='$pattern'");

        def filter(_ : Reference, nodes : array[IAst]) : bool
        {
          foreach (node in nodes)
          {
            | qr is IQualifiedReference when !qr.Span.IsEmpty => return true;
            | _ is IQualifiedReference => ()
            | _ => return false;
          }
          false
        }
        def qualified = visitor.Result.Where(filter).ToList();
        def qualified = qualified;
        def candidats = if (qualified.Count > 0) qualified else visitor.Result;

        // Находим первую ветку AST в которой есть зависимое свойство Scope и вычисляем по этому Scope список автодополнения
        foreach ((ast, _) in candidats)
        {
          match (ast)
          {
            | Reference(IsScopeEvaluated=true, IsRefEvaluated=true, Scope=scope, Ref=r) when ast.Span.IntersectsWith(span) =>
              mutable r2 = r : IRef;
              while (r2.ResolvedTo != null)
                r2 = r2.ResolvedTo;

              def symbolTypeOpt = if (r2 == null) null else r2.GetType().GetGenericArguments()[0];
              def getValidSymbolTypes(symbolType : System.Type, acc : list[System.Type]) : list[System.Type]
              {
                  def property = symbolType.GetProperty("DeclaredIn");
                  if (property == null)
                    symbolType :: acc
                  else
                    getValidSymbolTypes(property.PropertyType, symbolType :: acc)
              }
              def validSymbolTypes = if (symbolTypeOpt == null) [] else getValidSymbolTypes(symbolTypeOpt, []);
              def validSymbolTypes = validSymbolTypes;

              def matcher(symbol : DeclarationSymbol) : bool
              {
                //def qualified = qualified;
                def validSymbolTypes = validSymbolTypes;
                def pattern = pattern;
                def isNameMatch = !symbol.IsNameValid || StringPatternMatching.MatchPattern(symbol.Name, pattern);
                when (!isNameMatch)
                  return false;
                def isTypeMatch = validSymbolTypes.IsEmpty || validSymbolTypes.Exists(t => t.IsInstanceOfType(symbol)) || (qualified.Count > 0 && symbol is INamespace);
                isTypeMatch
              }
              def br = scope.Bind(matcher);

              foreach (symbol : DeclarationSymbol in br.GetSymbols())
              {
                def name = symbol.Name;
                when (StringPatternMatching.MatchPattern(name, pattern))
                {
                  _ = symbolsSet.Add(symbol);
                }
              }

            | _ => ()
          }
        }
      }
      def builder = ImmutableArray.CreateBuilder(symbolsSet.Count + matchedKeyWordsMap.Count);
      foreach (symbol in symbolsSet)
      {
        def desc = symbol.ToString();
        def elem = CompletionElem.Symbol(symbol.Id, symbol.Name, desc, desc, -1);
        builder.Add(elem);
      }

      foreach (keyword in matchedKeyWordsMap)
      {
        def elem = CompletionElem.Literal(keyword.Key, keyword.Value);
        builder.Add(elem);
      }

      builder.Sort(CompletionElemComparer());

      Log.Message($"    KeyWords='$(matchedKeyWordsMap.Count)'");
      Log.Message($"    Symbols='$(symbolsSet.Count)'");

      def ver = FileVersion(fileData.FileVersion);
      def msg = AsyncServerMessage.CompleteWord(FileId(fileData.FileId), ver, solutionId, ServerUtils.ConvertNSpan(replacementSpan), builder.MoveToImmutable());
      SendAsyncResponse(msg);
    }

    ConvertParseTreeReflection(node : R.ReflectionStruct, objectMap : Hashtable[R.ReflectionStruct, ParseTreeReflectionStruct]) : ParseTreeReflectionStruct
    {
      mutable result;
      when (objectMap.TryGetValue(node, out result))
        return result;

      def info       = node.Info;
      def resultInfo = ReflectionInfo(info.ShortName, info.FullName, info.IsMarker, info.CanParseEmptyString);
      def children = ImmutableArray.CreateBuilder(node.Children.Count);
      foreach (child in node.Children)
        children.Add(ConvertParseTreeReflection(child, objectMap));
      def kind =
        match (node.Kind)
        {
          | Normal    => ReflectionKind.Normal;
          | Recovered => ReflectionKind.Recovered;
          | Ambiguous => ReflectionKind.Ambiguous;
          | Deleted   => ReflectionKind.Deleted;
        };
      result = ParseTreeReflectionStruct(resultInfo, node.Description, kind, ConvertNSpan(node.Span), children.MoveToImmutable());
      objectMap.Add(node, result);
      result
    }

    public Dispose() : void
    {
      _mainQueue.CompleteAdding();
      _cts.Cancel();
      _cts.Dispose();
      _thread.Join()
    }
  }
}
