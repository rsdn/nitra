using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.ClientServer.Server;
using Nitra.Logging;

using System;
using System.Console;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.IO.Pipes;
using System.Linq;
using System.Threading;

module Program
{
  Main(args : array[string]) : void
  {
    Log.Init("Nitra.ClientServer.Server");
    Log.Message("Process ID: " + Process.GetCurrentProcess().Id);

    when ("true".Equals(Environment.GetEnvironmentVariable("NitraServerDebug"), StringComparison.OrdinalIgnoreCase))
    {
      assert2(false, "Start debugger");
    }

    when (args.Length != 1)
    {
      assert2(false, "Invalid number of parameters!");
      Log.Message("Invalid number of parameters, expected: <request pipe name> <response pipe name>");
      Environment.Exit(42);
    }

    Nitra.NitraUtils.IdeMode = true;

    def mainPipeName = args[0];
    def requestPipeName       = mainPipeName + Constants.RequestPipeSuffix;
    def asyncResponsePipeName = mainPipeName + Constants.AsyncResponsePipeSuffix;
    def responsePipeName      = mainPipeName + Constants.ResponsePipeSuffix;

    using (asyncResponsePipe = NamedPipeServerStream(asyncResponsePipeName, PipeDirection.Out))
    using (responsePipe      = NamedPipeServerStream(responsePipeName,      PipeDirection.Out))
    using (requestPipe       = NamedPipeServerStream(requestPipeName,       PipeDirection.In))
    {
      // Connect to the pipe or wait until the pipe is available.
      Write("Attempting to connect to pipes...");
      requestPipe.      WaitForConnection();
      responsePipe.     WaitForConnection();
      asyncResponsePipe.WaitForConnection();

      def asyncResponseWriter = BinaryWriter(asyncResponsePipe);
      def responseWriter      = BinaryWriter(responsePipe);
      def router              = Router(responseWriter, asyncResponseWriter);

      Log.Message("Connected to pipe.");
      def MainPipeReaderThreadMain()
      {
        def thread = Thread.CurrentThread;
        thread.Name = "Server Pipe Reader";
        thread.CurrentCulture = CultureInfo.InvariantCulture;

        using (reader = BinaryReader(requestPipe))
        {
          while (requestPipe.IsConnected)
          {
            try
            {
              def msg = Deserializer.Deserialize.[ClientMessage](reader);

              when (msg is ClientMessage.SolutionStartLoading)
                router.ProjectLoadCancel();

              router.AddMessage(msg);
            }
            catch
            {
              | _ is EndOfStreamException when !requestPipe.IsConnected =>
                Log.Message("The main pipe reader session has been terminated.");
                router.AddMessage(ClientMessage.Shutdown());
                return;
              | e                                                       => ServerUtils.LogException(asyncResponseWriter, e);
            }
          }
        }
      }
      def readerThread = Thread(MainPipeReaderThreadMain);
      readerThread.IsBackground = true;
      readerThread.Start();
      Log.Message("Server started.");
      router.Wait();
      Log.Message("Server stopped.");
      Log.Flush();
    }
  }
}
