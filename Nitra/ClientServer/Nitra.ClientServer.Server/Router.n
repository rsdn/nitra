using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.ClientServer.Server.ProjectSystem;
using Nitra.Declarations;
using Nitra.Logging;

using System;
using System.Threading;
using System.Globalization;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Collections.Immutable;
using System.Linq;
using System.Runtime.ExceptionServices;

using M  = Nitra.ClientServer.Messages;

namespace Nitra.ClientServer.Server
{
  internal partial class Router
  {
            _mainQueue                  : BlockingCollection[RouterMessage] = BlockingCollection();
            _parseQueue                 : BlockingCollection[ParserMessage] = BlockingCollection();
            _semanticAnalysisQueue      : BlockingCollection[ParserMessage] = BlockingCollection();
            _mainThread                 : Thread;
            _parseWorkers               : list[ParseWorker];
            _semanticAnalysisWorker     : SemanticAnalysisWorker;
    mutable _cts                        : CancellationTokenSource = CancellationTokenSource();
    public  SpanClassesManager          : SpanClassesManager;
    mutable _solution                   : Solution;
    mutable _projectLoadingCts          : CancellationTokenSource;
    public  MessageSink                 : IServerMessageSink { get; }
    public  PrettyPrintState            : PrettyPrintState { get; private set; }
    public  IsParseTreeReflectionEnable : bool { get; private set; }

    public this(messageSink : IServerMessageSink)
    {
      MessageSink             = messageSink;
      _mainThread             = Thread(RouteMessages) <- { Name = "Router"; CurrentCulture = CultureInfo.InvariantCulture; };
      _mainThread.Start();
      def cores               = ServerUtils.GetCoreCount(); // Environment.ProcessorCount
      Log.Message("Cores: " + cores);
      this.SpanClassesManager = SpanClassesManager(this);
      _parseWorkers           = $[1..cores].Map(_ => ParseWorker(this, _parseQueue, _mainQueue, SpanClassesManager));
      _semanticAnalysisWorker = SemanticAnalysisWorker(this, _semanticAnalysisQueue, _mainQueue, SpanClassesManager);
    }

    public SolutionId : SolutionId { get { if (_solution == null) SolutionId.Invalid else _solution.Id } }

    public ProjectLoadCancellationToken : CancellationToken
    {
      get
      {
        when (_projectLoadingCts == null)
          _projectLoadingCts = CancellationTokenSource();
        _projectLoadingCts.Token
      }
    }

    public ProjectLoadFinish() : void
    {
      _projectLoadingCts = null;
    }

    public ProjectLoadCancel() : void
    {
      def cts = _projectLoadingCts;
      when (cts != null)
      {
        _projectLoadingCts = null;
        //def cts = Interlocked.Exchange(ref _cts, CancellationTokenSource());
        cts.Cancel();
        cts.Dispose();
      }
    }

    public SendAsyncResponse(msg : AsyncServerMessage) : void
    {
      MessageSink.Send(msg);
    }

    public SendResponse(msg : ServerMessage) : void
    {
      MessageSink.Send(msg);
    }

    [HandleProcessCorruptedStateExceptions]
    RouteMessages() : void
    {
      while (!_mainQueue.IsCompleted)
      {
        try
        {
          foreach(msg in _mainQueue.GetConsumingEnumerable(_cts.Token))
          {
            | serverMsg is ClientMessage.Shutdown => OnClientMessage(serverMsg); return;
            | serverMsg is ClientMessage          => OnClientMessage(serverMsg);
            | serverMsg is RouterAnswerMessage    => OnRouterAnswerMessage(serverMsg);
            | _ => assert2(false)
          }
        }
        catch
        {
          | e is OperationCanceledException      => Log.Canceled(e);
          | _ is System.AccessViolationException => Environment.Exit(-3); // The server will restart automatically.
          | e                                    => ServerUtils.LogException(MessageSink, e)
        }
      }
    }

    public Wait() : void
    {
      unless (_mainQueue.IsCompleted)
      {
        _mainThread.Join();
        _mainQueue.CompleteAdding();
        _cts.Dispose();
        foreach(worker in _parseWorkers)
          worker.Dispose();
        _parseQueue.Dispose();
        _semanticAnalysisWorker.Dispose();
        _semanticAnalysisQueue.Dispose();
      }
    }

    public Send(msg: ClientMessage): void
    {
      AddMessage(msg);
    }

    public AddMessage(msg : RouterMessage): void
    {
      when (msg is ClientMessage.SolutionStartLoading)
        ProjectLoadCancel();

      unless (_mainQueue.IsCompleted)
        _mainQueue.Add(msg);
    }

    GetLibsMetadata(libs : ImmutableArray[string]) : void
    {
      def metadataBuilder = ImmutableArray.CreateBuilder(libs.Length);

      foreach (path in libs)
      {
        def langs = Language.GetLanguages(path);
        def langsBuilder = ImmutableArray.CreateBuilder(langs.Length);
        foreach (lang in langs)
        {
          def langInfo = LanguageInfo(lang.Name, path, array(0));
          langsBuilder.Add(langInfo);
        }
        def metadata = LibMetadata(ImmutableArray.Create("<not supported yet>"), langsBuilder.MoveToImmutable());
        metadataBuilder.Add(metadata);
      }

      SendResponse(ServerMessage.LibsMetadata(SolutionId, metadataBuilder.MoveToImmutable()));
    }

    GetLibsSyntaxModules(libs : ImmutableArray[string]) : void
    {
      def libsBuilder = ImmutableArray.CreateBuilder(libs.Length);

      foreach (path in libs)
      {
        def assembly = Language.LoadAssembly(path);
        def descriptors = GrammarDescriptor.GetDescriptors(assembly);
        def syntaxModulesBuilder = ImmutableArray.CreateBuilder(descriptors.Length);
        foreach (descriptor in descriptors)
          syntaxModulesBuilder.Add(descriptor.FullName);
        libsBuilder.Add(SyntaxModules(syntaxModulesBuilder.MoveToImmutable()));
      }

      SendResponse(ServerMessage.LibsSyntaxModules(SolutionId, libsBuilder.MoveToImmutable()));
    }

    GetLibsProjectSupports(libs : ImmutableArray[string]) : void
    {
      def libsBuilder = ImmutableArray.CreateBuilder(libs.Length);

      foreach (path in libs)
      {
        def typeBuilder = ImmutableArray.CreateBuilder(libs.Length);
        def assembly = Language.LoadAssembly(path);
        def attributes = assembly.GetCustomAttributes(typeof(ProjectSystem.ProjectSupportAttribute), false);

        foreach (attr is ProjectSystem.ProjectSupportAttribute in attributes)
        {
          def caption =
            if (attr == null)
            {
              def fullName = attr.Type.FullName;
              def index = fullName.LastIndexOf(".");
              if (index < 1)
                fullName
              else
                fullName.Substring(index)
            }
            else
              attr.Caption;
          typeBuilder.Add(ProjectSupport(caption, attr.Type.FullName, path));
        }

        libsBuilder.Add(ProjectSupports(typeBuilder.ToImmutable()));
      }

      SendResponse(ServerMessage.LibsProjectSupports(SolutionId, libsBuilder.MoveToImmutable()));
    }

    GetFileExtensions(projectId : int, languageNames : ImmutableArray[string]) : void
    {
      def project = _solution[projectId];
      def fileExtensions = project.GetFileExtensions(languageNames);
      SendResponse(ServerMessage.FileExtensions(SolutionId, fileExtensions));
    }

    FindSymbolReferences(projectId : ProjectId, fileId : FileId, pos : VersionedPos, forHighlighting : bool, tag : uint) : void
    {
      try _solution.GetProject(projectId).GetFile(fileId).FindSymbolReferences(pos, forHighlighting, tag);
      catch { _ => SendResponse(ServerMessage.FindSymbolReferences(SolutionId.Invalid, M.NSpan(), ImmutableArray.Empty, tag)); throw }
    }

    GetSubHint(projectId : ProjectId, symbolId : int) : void
    {
      try _solution[projectId].GetSymbolHint(symbolId)
      catch { e => SendResponse(ServerMessage.SubHint(e.ToString())); throw }
    }

    GetObjectContent(solutionId : SolutionId, projectId : ProjectId, fileId : FileId, fileVersion : FileVersion, objectId : int) : void
    {
      try _solution.GetFile(projectId, fileId).GetObjectContent(solutionId, fileVersion, objectId);
      catch { e => SendResponse(ServerMessage.ObjectContent(solutionId, ContentDescriptor.Fail("Exception: " + e))); }
    }
  } // class
} // namespace
