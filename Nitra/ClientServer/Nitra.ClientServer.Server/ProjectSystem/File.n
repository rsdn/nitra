using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.ClientServer.Server.ServerUtils;
using Nitra.Declarations;
using Nitra.Internal;
using Nitra.Logging;
using Nitra.PrettyPrint;
using Nitra.Runtime.Reflection;

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.IO;
using System.IO.Pipes;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

using NSP  = Nitra.ProjectSystem;
using SC   = System.Collections;
using Span = Nitra.ClientServer.Messages.NSpan;

namespace Nitra.ClientServer.Server.ProjectSystem
{
  internal class File : NSP.File, IDisposable
  {
    // TODO: override ParseResult, Ast, GetParseTree and so on and implement parsing/typing in work threads
    public  Parent                  : Project;
    public  override Id             : int                     { get { this.FileId.Value } }
    public  FileId                  : FileId                  { get; }
    public  CancellationTokenSource : CancellationTokenSource { get; private set; }
    public  DynamicExtensions       : Seq[GrammarDescriptor]  { get; }
    public  IsDisposed              : bool                    { get; private set; }
    public  override Version        : int                     { get { this.FileVersion.Value } }
    public  FileVersion             : FileVersion             { get; private set; }
            _parseQueue             : BlockingCollection[ParserMessage];
    mutable _fileInfo               : FileInfo;
    mutable _text                   : StringBuilder;
    mutable _snapshot               : SourceSnapshot;
    mutable _isNotLoaded            : bool;
    mutable _name                   : string;
    mutable _parseResult            : IParseResult;
    mutable _ast                    : IAst;
    mutable _parseTree              : ParseTree;
    mutable _objToIdMap             : ConcurrentDictionary[object, int];
    mutable _idToObjMap             : ConcurrentDictionary[int, object];
    mutable _needHint               : bool;
    mutable _caretPosOpt            : VersionedPos = VersionedPos.Invalid;
    mutable _highlightingPosOpt     : VersionedPos = VersionedPos.Invalid;
    mutable _isCompleteWord         : bool;

    public this(id : FileId, fullPath : string, version : FileVersion, parent : Project, content : string)
    {
      base(null);
      FileId            = id;
      _fileInfo         = FileInfo(fullPath);
      Parent            = parent;
      _name             = IO.Path.GetFileNameWithoutExtension(FullName);
      _parseQueue       = parent.ParseQueue;
      FileVersion       = version;
      (Language, DynamicExtensions) = parent.GetLanguage(Path.GetExtension(fullPath));

      when (content != null)
      {
        _text     = StringBuilder(content);
        _snapshot = SourceSnapshot(content, this, version);
      }
      // TODO: Add statistics support.

      parent.AddFile(this);
    }

    /// Used for in memory text editing (with no file available)
    public this(id : FileId, name : string, parent : Project, text : string)
    {
      base();
      FileId    = id;
      Parent    = parent;
      _snapshot = SourceSnapshot(text, this, 0);
      _text     = StringBuilder(text);
      _name     = name;
      (Language, DynamicExtensions) = parent.GetLanguage(Path.GetExtension(name));

      parent.AddFile(this);
    }

    public override Ast : IAst { get { _ast } }
    public override Language : Language { get; }
    public override Name : string { get { _name } }
    public override FullName : string { get { _fileInfo.FullName } }

    public IsSupported : bool { get { this.Language != null } }

    public override GetSource() : SourceSnapshot
    {
      when (_snapshot == null || _isNotLoaded)
      {
        assert2(_fileInfo != null);
        assert(_fileInfo != null);
        try
        {
          def text     = File.ReadAllText(_fileInfo.FullName, Encoding.UTF8); // TODO: add detect BOM and load UTF-8 if no BOM avalable
          _snapshot    = SourceSnapshot(text, this, Version);
          _text        = StringBuilder(text);
          _isNotLoaded = false;
        }
        catch
        {
          | e is FileNotFoundException =>
            Log.Message($"File not exists on disk. Id=$Id '$(e.FileName)'", ConsoleColor.White);
            _snapshot    = SourceSnapshot("", this, Version);
            _text        = StringBuilder("");
            _isNotLoaded = true;
        }
      }

      assert2(_text != null);

      _snapshot
    }

    public override Length : int
    {
      get
      {
        if (_text == null)
        {
          assert2(_fileInfo != null);
          assert(_fileInfo != null);
          _fileInfo.Length :> int
        }
        else
          _text.Length
      }
    }

    public override Project : NSP.Project { get { Parent } }

    public Dispose() : void
    {
      assert2(!IsDisposed);

      when (IsDisposed)
        return;

      def cts = CancellationTokenSource;
      when (cts != null)
      {
        CancellationTokenSource = null;

        unless (cts.IsCancellationRequested)
          cts.Cancel();
        cts.Dispose();
      }

      IsDisposed = true;
    }

    Insert(pos: int, text: string) : void
    {
      _ = _text.Insert(pos, text)
    }

    Delete(span: Span) : void
    {
      _ = _text.Remove(span.StartPos, span.Length)
    }

    Replace(span: Span, text: string) : void
    {
      Delete(span);
      Insert(span.StartPos, text)
    }

    ApplyChange(change : FileChange) : void
    {
      | FileChange.Insert(pos, text)   => Insert(pos, text)
      | FileChange.Delete(span)        => Delete(span)
      | FileChange.Replace(span, text) => Replace(span, text)
    }

    //[DllImport("msvcrt.dll", EntryPoint = "memcpy", CallingConvention = CallingConvention.Cdecl, SetLastError = false)]
    //public static extern memcpy(dest : IntPtr, src : IntPtr, count : UIntPtr) : IntPtr;

    public Change(version : FileVersion, change : FileChange, caretPos : VersionedPos) : void
    {
      Log.Message($"Change fileId=$Id caretPos=$caretPos _isCompleteWord=$_isCompleteWord");
      //_ = memcpy(IntPtr.Zero, IntPtr.Zero, UIntPtr(42));
      _ = GetSource();
      FileVersion = version;
      ApplyChange(change);
      _snapshot = SourceSnapshot(_text.ToString(), this, version);

      TrySendParseMessage(if (_isCompleteWord) caretPos.Pos else -1);
    }

    public Change(version : FileVersion, changes : ImmutableArray[FileChange], caretPos : VersionedPos) : void
    {
      _ = GetSource();
      FileVersion = version;
      for (mutable i = changes.Length - 1; i >= 0; i--)
        ApplyChange(changes[i]);
      _snapshot = SourceSnapshot(_text.ToString(), this, version);
      //IO.File.WriteAllText($@"C:\Temp\005\$Name$(version.Value).ncs", _snapshot.Text);

      TrySendParseMessage(if (_isCompleteWord) caretPos.Pos else -1);
    }

    // overrides

    GetReParseMessage(completePos : int = -1) : ParserMessage.ParseFile
    {
      _parseMessages.Clear();
      _astMessages.Clear();
      _typingMessages.Clear();

      def language = Language;
      assert2(language.StartRule != null);

      CancellationTokenSource?.Cancel();
      CancellationTokenSource?.Dispose();

      if (_ast == null)
        Parent.CancelSemanticAnalysisCancellation();
      else
      {
        _parseResult = null;
        _ast         = null;
        _parseTree   = null;
        Parent.AstDropped(this);
      }

      def cancellationTokenSource = CancellationTokenSource();
      def cancellationToken       = cancellationTokenSource.Token;
      def source                  = GetSource();
      def parseSession            = ParseSession(language.StartRule,
                                        language.CompositeGrammar,
                                        cancellationToken = cancellationToken,
                                        dynamicExtensions = DynamicExtensions,
                                        completionStartPos = completePos);
      CancellationTokenSource = cancellationTokenSource;

      ParserMessage.ParseFile(Parent.Parent.Id, Parent.Id, this.FileId, parseSession, source)
    }

    public CreateAstMessage(parseResult : IParseResult) : ParserMessage.CreateAst
    {
      _parseResult = parseResult;
      TryMatchBrackets();

      _parseTree   = parseResult.CreateParseTree();
      ParserMessage.CreateAst(Parent.Parent.Id, Parent.Id, this.FileId, parseResult, IsActive)
    }

    public AstCreated(ast : IAst, parseTree : ParseTree, completionPos : int, parseResultOpt : IParseResult) : void
    {
      _parseTree = parseTree;
      _ast = ast;

      when (completionPos < 0)
        TryHighlightSymbolReferences();

      if (_isCompleteWord && CanCompleteWord())
      {
        def currentCompleteWordPos =
          if (_caretPosOpt.IsInvalid &&  _caretPosOpt.Version == parseResultOpt.SourceSnapshot.Version)
            _caretPosOpt.Pos
          else
            completionPos;
        Parent.AstCreated(this, currentCompleteWordPos, parseResultOpt);
      }
      else
        // TODO: make _astMessages local for working threads
        //_astMessages = NSP.CompilerMessageList();
        Parent.AstCreated(this, -1, null);
    }

    CanCompleteWord() : bool
    {
      def pos         = _caretPosOpt.Pos;
      def parseResult = _parseResult;

      when (parseResult == null)
        return false;

      // Get information about the whitespace nodes of the Parse Tree in the cursor area
      def curretSpan   = Nitra.NSpan(pos, pos);
      def spans        = HashSet();
      def spasesWalker = VoidRuleWalker(curretSpan);

      spasesWalker.Walk(parseResult, spans);

      foreach (spanInfo when spanInfo.Span.Contains(curretSpan) && spanInfo.SpanClass != Language.DefaultSpanClass in spans)
        return false; // exit if the completion goes in the comments or garbage

      true
    }

    public CreateVisualInfo(parseResult : IParseResult) : void
    {
      def solutionId = Parent.Parent.Id;
      _parseQueue.Add(ParserMessage.CreateKeywordsHighlighting(solutionId, Parent.Id, this.FileId, parseResult));
      _parseQueue.Add(ParserMessage.CreateOutlining(solutionId, Parent.Id, this.FileId, parseResult));
    }

    public Activate(version : FileVersion) : void
    {
      IsActive = true;

      when (version != FileVersion || _isNotLoaded)
      {
        FileVersion = version;
        _snapshot = null;
        TrySendParseMessage();
        return;
      }

      when (!this.IsSupported)
        return;

      def parseResult = _parseResult;

      when (parseResult != null)
      {
        CreateVisualInfo(parseResult);
        SendCompilerMessages(parseResult);
        unless (HasParseError(parseResult))
          SendSemanticAnalysisMessages();
      }

      TryPrettyPrint();
      TryCreateParseTreeReflection();

      when (Parent.IsSemanticAvailable)
        Parent.ParseQueue.Add(ParserMessage.CreateSymbolsHighlighting(Parent.Parent.Id, Parent.Id, this.FileId, this.FileVersion, Ast, -1));
    }

    static HasParseError(parseResult : IParseResult) : bool
    {
      GetParseErrorCount(parseResult) > 0
    }

    static GetParseErrorCount(parseResult : IParseResult) : int
    {
      (parseResult.CompilerMessages :> Nitra.ProjectSystem.CompilerMessageList).Count(m => m.Type == CompilerMessageType.Error || m.Type == CompilerMessageType.FatalError)
    }

    SendSemanticAnalysisMessages() : void
    {
      def cm = Parent.GetSemanticAnalysisMessages(FileId);
      Parent.Router.SendAsyncResponse(AsyncServerMessage.SemanticAnalysisMessages(FileId(FileId), FileVersion(FileVersion), Parent.Parent.Id, Parent.Id, cm));
    }

    SendCompilerMessages(parseResult : IParseResult) : void
    {
      def parent = Parent;
      ServerUtils.SendCompilerMessages(parseResult, parent.Router, parent.Parent.Id, parent.Id, this.FileId);
    }

    TryCreateParseTreeReflection() : void
    {
      def router           = Parent.Router;
      when (router.IsParseTreeReflectionEnable && _parseResult != null)
        Parent.ParseQueue.Add(ParserMessage.CreateParseTreeReflection(Parent.Parent.Id, Parent.Id, this.FileId, this.FileVersion, _parseResult));
    }

    TryPrettyPrint() : void
    {
      def router           = Parent.Router;
      def prettyPrintState = router.PrettyPrintState;
      when (router.PrettyPrintState != PrettyPrintState.Disabled && _parseTree != null)
        Parent.ParseQueue.Add(ParserMessage.CreatePrettyPrint(Parent.Parent.Id, Parent.Id, this.FileId, this.FileVersion, prettyPrintState, _parseTree));
    }

    public Deactivate() : void
    {
      IsActive = false;
    }

    public CompleteWord(version : FileVersion, pos : int) : void
    {
      Log.Message($"CompleteWord started in the $version file in position: $pos");
      _isCompleteWord = true;
      Parent.IsCompleteWord = true;
      TrySendParseMessage(pos);
    }

    public CompleteWordDismiss() : void
    {
      _isCompleteWord = false;
      Parent.IsCompleteWord = false;
      TrySendParseMessage(); // Restore normal state
    }

    public FindSymbolDefinitions(pos : VersionedPos) : void
    {
      def ast = _ast;

      when (ast == null || ast.Location.Source.Version != pos.Version)
      {
        // maybe better return special message?
        assert2(false);
        Parent.Router.SendResponse(ServerMessage.FindSymbolDefinitions(Parent.Parent.Id, NSpan(), ImmutableArray.Empty));
        return;
      }

      def action(cancellationToken : CancellationToken, solutionId : SolutionId, _asts : ImmutableArray[IAst * bool]) : void
      { // execute when Parent.IsSemanticAvailable
        def router             = this.Parent.Router;
        def pos                = pos;
        def ast                = ast;
        def (refSpan, symbols) = GetSymbols(cancellationToken, pos.Pos, ast);

        def biulder = ImmutableArray.CreateBuilder();
        foreach (symbol in symbols)
          foreach (decl in symbol.GetDeclarationsUntyped())
            biulder.Add(SymbolLocation(symbol.Id, ServerUtils.ConvertLocation(decl.Name.Location, withText=true)));

        def names = biulder.ToImmutableArray();
        router.SendResponse(ServerMessage.FindSymbolDefinitions(solutionId, refSpan, names));
      }

      Parent.AddSemanticAction(action);
    }

    public FindSymbolReferences(pos : VersionedPos, forHighlighting : bool) : void
    {
      def ast      = _ast;
      def needHint = _needHint && forHighlighting;
      _needHint    = false;
      def symbolCache = Parent : ISymbolCache;

      when (ast == null || ast.Location.Source.Version != pos.Version)
      {
        // maybe better return special message?
        assert2(false);
        Parent.Router.SendResponse(ServerMessage.FindSymbolReferences(Parent.Parent.Id, NSpan(), ImmutableArray.Empty));
        return;
      }

      def action(cancellationToken : CancellationToken, solutionId : SolutionId, mutable asts : ImmutableArray[IAst * bool]) : void
      { // execute when Parent.IsSemanticAvailable
        try
        {
        Log.Message("action(FindSymbolReferences) started", ConsoleColor.DarkYellow);
        def router             = this.Parent.Router;
        def pos                = pos;
        def ast                = ast;

        def (refSpan, symbols) = GetSymbols(cancellationToken, pos.Pos, ast);
        def defsBiulder        = ImmutableArray.CreateBuilder();
        def symbolsBiulder     = ImmutableArray.CreateBuilder(symbols.Length);
        def refsBiulder        = ImmutableArray.CreateBuilder();
        def spansBiulder       = ImmutableArray.CreateBuilder();

        when (forHighlighting)
        {
          def builder = ImmutableArray.CreateBuilder();
          foreach ((_, true) as elem in asts)
            builder.Add(elem);
          asts = builder.ToImmutable();
        }

        def hintBuilderOpt = if (needHint) Text.StringBuilder("<hint>", 64) else null;

        foreach (symbol in symbols with index)
        {
          when (needHint)
          {
            when (index > 0)
              _ = hintBuilderOpt.AppendLine();
            _ = hintBuilderOpt.AppendLine(symbol.MakeHint(symbolCache));
          }

          def decls = symbol.GetDeclarationsUntyped();
          assert2(defsBiulder.Count == 0);
          defsBiulder.Capacity = decls.Count();

          foreach (decl in decls)
            defsBiulder.Add(SymbolLocation(symbol.Id, ServerUtils.ConvertLocation(decl.Name.Location, !forHighlighting)));

          def projectSupport = Parent.GetProjectSupport();
          def visitor = CollectSymbolRefsAstVisitor(cancellationToken, projectSupport, symbol);

          for (mutable i = 0; i < asts.Length; i++)
          {
            def (curAst, _) = asts[i];
            when (curAst == null)
              continue;
            visitor.FoundSymbols.Clear();
            curAst.Accept(visitor);
            def source       = curAst.Source;
            def fileIdentity = FileIdentity(FileId(source.File.Id), FileVersion(source.Version));


            assert2(spansBiulder.Count == 0);
            spansBiulder.Capacity = visitor.FoundSymbols.Count;

            foreach (r in visitor.FoundSymbols)
              spansBiulder.Add(ServerUtils.ConvertToRange(r.Location, !forHighlighting));

            refsBiulder.Add(FileEntries(fileIdentity, spansBiulder.MoveToImmutable()));
          }

          symbolsBiulder.Add(SymbolRreferences(symbol.Id, defsBiulder.MoveToImmutable(), refsBiulder.ToImmutable()));
        }

        when (needHint)
        {
          def source = ast.Location.Source;
          def hint   = hintBuilderOpt.Append("</hint>").ToString();
          router.SendAsyncResponse(AsyncServerMessage.Hint(FileId(source.File.Id), FileVersion(source.Version), solutionId, hint, refSpan));
        }

        if (forHighlighting)
          router.SendAsyncResponse(AsyncServerMessage.FindSymbolReferences(FileId.Invalid, FileVersion.Invalid, solutionId, refSpan, symbolsBiulder.MoveToImmutable()));
        else
          router.SendResponse(ServerMessage.FindSymbolReferences(solutionId, refSpan, symbolsBiulder.MoveToImmutable()));

          Log.Message("action(FindSymbolReferences) finished", ConsoleColor.DarkYellow);
        }
        catch { | _ => Parent.Router.SendResponse(ServerMessage.FindSymbolReferences(Parent.Parent.Id, NSpan(), ImmutableArray.Empty)); throw; }
      }

      Log.Message("AddSemanticAction(FindSymbolReferences)", ConsoleColor.DarkCyan);
      Parent.AddSemanticAction(action);
    }

    static GetSymbols(cancellationToken : CancellationToken, pos : int, ast : IAst) : Span * array[DeclarationSymbol]
    {
      def visitor = CollectSymbolsAndRefsInSpanAstVisitor(cancellationToken, NSpan(pos));
      ast.Accept(visitor);

      def symbols = HashSet();
      mutable refSpan : Span;

      unless (cancellationToken.IsCancellationRequested)
        foreach (name when name.IsSymbolEvaluated in visitor.Names)
        {
          when (refSpan == default(Span))
            refSpan = ServerUtils.ConvertNSpan(name.Span);

          _ = symbols.Add(name.Symbol);
        }

      def processRef(r : IRef) : void
      {
        | r when r.IsResolvedToEvaluated => processRef(r.ResolvedTo)
        | r when r.IsAmbiguous => symbols.UnionWith(r.Ambiguities)
        | r when r.IsSymbolEvaluated =>
          when (refSpan == default(Span))
            refSpan = ServerUtils.ConvertNSpan(r.Location.Span);

          _ = symbols.Add(r.Symbol);
        | _ => ()
      }

      unless (cancellationToken.IsCancellationRequested)
        foreach (r in visitor.Refs)
          processRef(r);

      (refSpan, symbols.ToArray())
    }

    public static GetFullName(obj : DeclarationSymbol) : string
    {
      if (obj.IsFullNameEvaluated)
        obj.FullName
      else if (obj.IsNameValid)
        obj.Name + " <FullName not evaluated>"
      else
        obj.InitialName + " <FullName not evaluated. Name not valid.>"
    }

    public static GetName(obj : DeclarationSymbol) : string
    {
      if (obj.IsNameValid)
        obj.Name
      else
        obj.ToString()
    }

    public static GetText(obj : IAst) : string
    {
      try
      {
        def maxLen = 200;
        def loc    = obj.Location;
        def span   = loc.Span;
        def text   = loc?.Source?.OriginalText;

        when (text == null)
          return <#«incorrect Source for AST»#>;

        when (span.IsEmpty || text.Length == 0)
          return "";

        def index  = text.IndexOfAny(array['\r', '\n'], span.StartPos, span.Length);
        def len    = if (index > 0) index - span.StartPos else Math.Min(maxLen, span.Length);
        if (len == span.Length)
          text.Substring(span.StartPos, len)
        else
          text.Substring(span.StartPos, len) + "..."
      }
      catch { e => Log.Exception(e); $<#«Exception: $(e.Message)»#>; }
    }

    public static GetText(obj : object) : string
    {
      def str    = obj.ToString();
      def index  = str.IndexOfAny(array['\r', '\n']);
      def maxLen = 200;
      def len    = if (index > 0 && index < maxLen) index else maxLen;
      if (str.Length > len)
        str.Substring(0, len) + "..."
      else
        str
    }

    public GetObjectContent(solutionId : SolutionId, fileVersion : int, objectId : int) : void
    {
      def ast = _ast;

      when (ast == null || ast.Location.Source.Version != fileVersion || Parent.Data == null || Parent.Parent.Id != solutionId)
      {
        Parent.Router.SendResponse(ServerMessage.ObjectContent(solutionId, ContentDescriptor.Fail("AST not created yet.")));
        return;
      }

      def action(cancellationToken : CancellationToken, solutionId : SolutionId, _asts : ImmutableArray[IAst * bool]) : void
      {
        try
        {
          def objectId   = objectId;
          when (objectId == 0)
          lock (this)
          {
            if (_objToIdMap == null)
            {
              _objToIdMap  = ConcurrentDictionary();
              _idToObjMap  = ConcurrentDictionary();
            }
            else
            {
              _objToIdMap.Clear();
              _idToObjMap.Clear();
            }

            _objToIdMap[ast] = 0;
            _idToObjMap[0]   = ast;
          }

          def objToIdMap = _objToIdMap;
          def idToObjMap = _idToObjMap;

          assert2(objToIdMap != null);
          assert2(idToObjMap != null);

          when (cancellationToken.IsCancellationRequested)
          {
            Parent.Router.SendResponse(ServerMessage.ObjectContent(solutionId, ContentDescriptor.Fail("Operation canceled.")));
            return;
          }

          def astType = typeof(IAst);
          def isContentProperty(prop : PropertyInfo) : bool
          {
            def name = prop.Name;
            match (name)
            {
              | "HasValue" => true
              | "Id" | "IsMissing" | "File" | "Span" | "IsAmbiguous" => false
              | _ => !(name.StartsWith("Is", StringComparison.Ordinal) && name.EndsWith("Evaluated", StringComparison.Ordinal))
                && !name.Equals("IsAllPropertiesEvaluated", StringComparison.Ordinal) && prop.GetIndexParameters().Length == 0
            }
          }
          def findObject() : object
          {
            def ast = ast;
            mutable obj;
            obj = if (objectId == 0) ast
                  else if (idToObjMap.TryGetValue(objectId, out obj)) obj
                  else null;

            when (ast?.Location.Source.Version != fileVersion)
              obj = null;

            obj
          }
          def obj = findObject();
          def readMembers(obj : object) : array[PropertyDescriptor]
          {
            def t = obj.GetType();
            def members = t.GetProperties(BindingFlags.Instance | BindingFlags.Public)
                           .Where(isContentProperty)
                           .Select(readValue(obj, t, _))
                           .Concat(
                            t.GetFields(BindingFlags.Instance | BindingFlags.Public)
                             .Select(readFieldValue(obj, t, _)))
                           .OrderBy(x => x.Name)
                           .ToArray();
            members
          }
          and loadObjectContent(obj : object) : ContentDescriptor
          {
            match (obj)
            {
              | obj is IAstList[IAst] => ContentDescriptor.AstItems(readMembers(obj), obj.MapToArray(toObjectDescriptor))
              | obj is IAst           => ContentDescriptor.Members(readMembers(obj))
              | obj is SC.IEnumerable => ContentDescriptor.Items(obj.Cast.[object]().MapToArray(toObjectDescriptor))
              | _ => ContentDescriptor.Members(readMembers(obj))
            }
          }
          and toObjectDescriptor(obj : object) : ObjectDescriptor
          {
            def count(seq : SC.IEnumerable) : int
            {
              | x is SC.ICollection => x.Count
              | _ =>
                mutable i;
                foreach (_ in seq)
                  i++;
                i
            }
            def getId(obj : object) : int
            {
              assert2(obj != null);

              mutable id;
              unless (objToIdMap.TryGetValue(obj, out id))
              {
                id = objToIdMap.Count;
                objToIdMap[obj] = id;
                idToObjMap[id]  = obj;
              }

              id
            }

            match (obj)
            {
              | null                     => ObjectDescriptor.Null()
              | obj is DeclarationSymbol => def t = obj.GetType();  ObjectDescriptor.Symbol(getId(obj), GetName(obj), GetFullName(obj), t.Name, t.FullName, null)
              | obj is IAstList[IAst]    => ObjectDescriptor.AstList(ConvertNSpan(obj.Span), getId(obj), null, null, obj.Count)
              | obj is IAst              => def t = obj.GetType(); ObjectDescriptor.Ast(ConvertNSpan(obj.Span), getId(obj), GetText(obj), t.Name, t.FullName, null)
              | obj is string =>
                mutable i = 0;
                for (mutable nlCount = 0; nlCount < 5 && i < obj.Length && i < 400; )
                {
                  def index = obj.IndexOf('\n', i);
                  if (index >= 0)
                  {
                    i = index + 1;
                    nlCount++;
                  }
                  else
                    i++;
                }

                ObjectDescriptor.String(if (obj.Length == i) obj else (obj.Substring(0, i) + "..."))

              | obj is SC.IEnumerable => ObjectDescriptor.Seq(getId(obj), null, count(obj))
              | obj is System.Int16   => ObjectDescriptor.Int16  (obj)
              | obj is System.Int32   => ObjectDescriptor.Int32  (obj)
              | obj is System.Int64   => ObjectDescriptor.Int64  (obj)
              | obj is System.Char    => ObjectDescriptor.Char   (obj)
              | obj is System.SByte   => ObjectDescriptor.SByte  (obj)
              | obj is System.UInt16  => ObjectDescriptor.UInt16 (obj)
              | obj is System.UInt32  => ObjectDescriptor.UInt32 (obj)
              | obj is System.UInt64  => ObjectDescriptor.UInt64 (obj)
              | obj is System.Byte    => ObjectDescriptor.Byte   (obj)
              | obj is System.Single  => ObjectDescriptor.Single (obj)
              | obj is System.Double  => ObjectDescriptor.Double (obj)
              | obj is System.Boolean => ObjectDescriptor.Boolean(obj)
              | obj is IParsedValue   => ObjectDescriptor.Parsed(ConvertNSpan(obj.Span), toObjectDescriptor(obj.Value))
              | _                     => def t = obj.GetType(); ObjectDescriptor.Object(getId(obj), GetText(obj), t.Name, t.FullName, null)
            }
          }
          and readFieldValue(obj : object, t : System.Type, field : FieldInfo) : PropertyDescriptor
          {
            def name      = field.Name;
            def objDesc   = toObjectDescriptor(field.GetValue(obj));

            PropertyDescriptor(PropertyKind.Simple, name, objDesc)
          }
          and readValue(obj : object, t : System.Type, prop : PropertyInfo) : PropertyDescriptor
          {
            def name           = prop.Name;
            def propType       = prop.PropertyType;
            def attr           = prop.GetCustomAttributes(typeof(PropertyAttribute), false).FirstOrDefault() :> PropertyAttribute;
            //def isDependent    = attr?.IsDependent;
            def isOut          = attr?.IsOut;
            def isIn           = attr?.IsIn;
            def isEvalPropName = "Is" + name + "Evaluated";
            def isEvalProp     = t.GetProperty(isEvalPropName);
            def kind =
              match (isIn, isOut)
              {
                | (true,  false) => PropertyKind.DependentIn
                | (true,   true) => PropertyKind.DependentInOut
                | (false,  true) => PropertyKind.DependentOut
                | (false, false) when astType.IsAssignableFrom(propType) => PropertyKind.Ast
                | (false, false) => PropertyKind.Simple
              };
            def objDesc =
              if (isEvalProp == null || isEvalProp.GetValue(obj, null) :> bool)
                toObjectDescriptor(try prop.GetValue(obj, null) catch { e => e.Message })
              else
                ObjectDescriptor.NotEvaluated();

            PropertyDescriptor(kind, name, objDesc)
          }

          def content = loadObjectContent(obj);
          Parent.Router.SendResponse(ServerMessage.ObjectContent(solutionId, content));
        }
        catch
        {
          | e => Parent.Router.SendResponse(ServerMessage.ObjectContent(solutionId, ContentDescriptor.Fail(e.ToString())));
        }
      }

      Parent.AddSemanticAction(action);
    }

    public GetObjectGraph(solutionId : SolutionId, fileVersion : int, objectId : int) : void
    {
      def ast = _ast;

      when (ast == null || ast.Location.Source.Version != fileVersion || Parent.Data == null || Parent.Parent.Id != solutionId)
        return;

      def action(cancellationToken : CancellationToken, _solutionId : SolutionId, _asts : ImmutableArray[IAst * bool]) : void
      {
        def idToObjMap = _idToObjMap;

        when (idToObjMap == null)
          return;

        when (cancellationToken.IsCancellationRequested)
          return;

        mutable obj;
        when (idToObjMap.TryGetValue(objectId, out obj))
        {
          def type = obj.GetType();
          def toDot = type.GetMethod("ToDot", array[]);
          when (toDot == null)
            return;
          def dot = toDot.Invoke(obj, array[]) :> string;
          DotUtils.ExecuteDot(dot);
          //Parent.Router.SendAsyncResponse(AsyncServerMessage.ObjectDot(FileId(FileId), FileVersion(FileVersion), Parent.Parent.Id, objectId, dot));
        }
      }

      Parent.AddSemanticAction(action);
    }

    public RenameFile(newId : FileId, newPath : string) : void
    {
      def source     = this.GetSource();
      def newVersion = this.FileVersion;
      def content    = source.Text;
      def project    = Parent;
      assert(newVersion == source.Version);
      project.RemoveFile(this);
      def newFile = File(newId, newPath, newVersion, project, content);
      newFile.IsActive = IsActive;
      newFile.TrySendParseMessage();
    }

    public TrySendParseMessage(completePos : int = -1) : void
    {
      when (this.IsSupported)
        _parseQueue.Add(this.GetReParseMessage(completePos));
    }

    public SetCaretPos(pos : VersionedPos) : void
    {
      Log.Message($"SetCaretPos pos=$pos");
      _caretPosOpt        = pos;
      _highlightingPosOpt = pos;

      TryMatchBrackets();
      TryHighlightSymbolReferences();
    }

    public GetHint(pos : VersionedPos) : void
    {
      _needHint           = true;
      _highlightingPosOpt = pos;

      TryHighlightSymbolReferences();
    }

    TryMatchBrackets() : void
    {
      when (_caretPosOpt.IsInvalid)
        return;

      def parseResult = _parseResult;

      when (parseResult != null && parseResult.SourceSnapshot.Version == _caretPosOpt.Version)
      {
        def solutionId  = Parent.Parent.Id;
        _parseQueue.Add(ParserMessage.CreateMatchBrackets(solutionId, Parent.Id, this.FileId, parseResult, _caretPosOpt.Pos));
      }
    }

    TryHighlightSymbolReferences() : void
    {
      when (_highlightingPosOpt.IsInvalid)
        return;

      def ast = _ast;

      when (ast == null || ast.Location.Source.Version != _highlightingPosOpt.Version)
        return;

      FindSymbolReferences(_highlightingPosOpt, forHighlighting=true);
    }

    public override ToString() : string { $"$Name($(Parent.Name) project)" }

    public override HasAst                : bool               { get { _ast != null } }
    public override ParseResult           : Nitra.IParseResult { get { _parseResult }   }
    public override GetParseTree()        : Nitra.ParseTree    { _parseTree }

    public override DeepResetProperties() : void               { throw System.NotImplementedException() }
  }
}
