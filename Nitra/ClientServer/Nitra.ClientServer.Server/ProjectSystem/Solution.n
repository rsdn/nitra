using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.Declarations;
using Nitra.Logging;

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Linq;

using NSP = Nitra.ProjectSystem;

namespace Nitra.ClientServer.Server.ProjectSystem
{
  internal class Solution : NSP.Solution, IDisposable
  {
            _projects        : Hashtable[int, Project] = Hashtable();
            _failedProjects  : HashSet[int] = HashSet();
            _failedFiles     : HashSet[int] = HashSet();
            _files           : Hashtable[int, list[File]]    = Hashtable();
    public  Path             : string     { get; }
    public  Id               : SolutionId { get; }
    public  IsDisposed       : bool       { get; private set; }

    public this(id : SolutionId, path : string)
    {
      Id   = id;
      Path = path;

      Log("Solution opening. Id=" + id + " Path='" + path + "'")
    }

    public IsOpened       : bool    { get; private set; }
    public Item[projectId : int] : Project { get { GetProject(projectId) } }

    /// Return true in first time.
    internal SetProjectFailedState(id : int) : bool
    {
      _failedProjects.Add(id);
    }

    /// Return true in first time.
    internal SetFileFailedState(id : int) : bool
    {
      _failedFiles.Add(id);
    }

    public GetProject(id : int) : Project
    {
      assert2(!IsDisposed);
      mutable value;
      if (_projects.TryGetValue(id, out value))
        value
      else
      {
        if (_failedProjects.Add(id))
          throw ArgumentException($"Can't find a project with id=$id.", "id")
        else
          throw FailedStateException();
      }
    }

    public GetFiles(id : int) : list[File]
    {
      assert2(!IsDisposed);
      mutable file;
      if (_files.TryGetValue(id, out file))
        file
      else
      {
        if (_failedFiles.Add(id))
          throw ArgumentException($"Can't find file with id=$id.", "id");
        else
          throw FailedStateException();
      }
    }

    public GetFile(projectId : ProjectId, id : int) : File
    {
      assert2(!IsDisposed);

      def project = GetProject(projectId);

      project.GetFile(id)
    }

    internal _N_OnFileAdded(file : File) : void
    {
      assert2(!IsDisposed);
      mutable files;
      if (_files.TryGetValue(file.Id, out files))
      {
        files ::= file;
        _files[file.Id] = files;
      }
      else
        _files.Add(file.Id, [file]);
    }

    internal _N_OnFileRemoved(id : int) : void
    {
      when(IsDisposed)
        return;
      def files = _files[id];
      def filteredFiles = files.Filter(f => f.Id != id);
      if (filteredFiles is [])
        _files.Remove(id);
      else
        _files[id] = filteredFiles;
    }

    public Open(): void
    {
      assert2(!IsDisposed);
      IsOpened = true;
    }

    public Log(msg : string) : void { Log.Message(msg) }

    public AddProject(project : Project): void
    {
      assert2(!IsDisposed);
      _projects.Add(project.Id, project);
    }

    public RemoveProject(id : int) : void
    {
      assert2(!IsDisposed);
      def project = _projects[id];

      _projects.Remove(id);
      project.Dispose();
    }

    public FindDeclarations(pattern : string, primaryProjectId : ProjectId, hideExternalItems : bool, kinds : ImmutableArray[string]) : void
    {
      def projects = _projects.Values.ToArray();
      foreach (project when project.Id == primaryProjectId in projects) // start calcs for primary project
        project.FindDeclarations(pattern, kinds);
      foreach (project when project.Id != primaryProjectId in projects) // start calcs for other projects
        project.FindDeclarations(pattern, kinds);
    }

    public override Projects : Seq[NSP.Project] { get { _projects.Values } }

    public Dispose() : void
    {
      assert2(!IsDisposed);

      when (IsDisposed)
        return;

      IsDisposed = true;

      foreach (v in _projects.Values)
        v.Dispose();

      IsOpened = false;
      _files.Clear();
      _projects.Clear();
    }
  }
}
