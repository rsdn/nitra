using Nitra.Declarations;
using Nitra.Serialization2;

using System;
using System.IO;
using Nemerle.Collections;

namespace Nitra.Declarations
{
  public partial interface ScopedAst : IAst
  {
  }

  public partial interface Declaration : ScopedAst
  {
    IsParsed       : bool { get; }
    IgnoreCase     : bool { get; }
    CreateSymbol() : DeclarationSymbol;
  }

  public partial interface DeclarationSymbol : IDependentPropertyContainer, ISerializable
  {
    Id                              : int               { get; }
    Name                            : string            { get; }
    InitialName                     : string            { get; }
    IsNameValid                     : bool              { get; }
    /// If return value is greater than 0 it is valid name ID which can be used in StringIndex.GetText().
    /// If return value is 0 the name of symbol is not set.
    /// If return value is less then 0 the name of symbol set more then one time (is ambiguous).
    ///   * You can use bitwise complement (~ operator in C#) to convert returned value to first name id of this symbol if value less then 0.
    ///   * All names of symbol you can get in declarations (see GetDeclarations*() methods).
    NameId                          : long              { get; }
    Owner                           : TableScope        { get; }
    FirstDeclarationOrDefault       : Declaration       { get; }
    FirstParsedDeclarationOrDefault : Declaration       { get; }
    DeclarationsCount               : int               { get; }
    HasDeclarations                 : bool              { get; }
    HasParsedDeclarations           : bool              { get; }
    IsParsed                        : bool              { get; }
    Origin                          : DeclarationSymbol { get; }

    GetDeclarationsUntyped() : Seq[Declaration];
    VisitChildrenAndSelf(getCildren : Func[DeclarationSymbol, Seq[DeclarationSymbol]], callback : Predicate[DeclarationSymbol]) : bool;

    AddDeclaration(newDeclaration : Declaration) : void;             // TODO: remove from public interface
    RemoveDeclarations(shouldRemove : Predicate[Declaration]) : int; // TODO: remove from public interface
    CanMerge(candidate : Declaration) : bool;
    IsSameIdentity(candidate : Declaration) : bool;
    AfterStage(stage : int) : void;
    DecomposeType() : ValueOption[TypeStructure];
    MakeHint(symbolCache : ISymbolCache) : string;
    GetTable(tableName : string) : ValueOption[TableScope]
  }

  public module DeclarationExtensions
  {
    public EmitSymbol(this declaration : Declaration, symbol : DeclarationSymbol, context : DependentPropertyEvalContext) : void
    {
      _ = declaration;
      context.EmitSymbol(symbol)
    }
  }
}
