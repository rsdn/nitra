using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;
using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.ProjectSystem;
using Nitra.Runtime.Reflection;

using System;
using System.Collections.Generic;
using System.Linq;

using System.Text;
using SCG = System.Collections.Generic;

namespace Nitra
{
  public class CollectSymbolErrorsVisitor : IAstVisitor
  {
    public CompilerMessages : CompilerMessageList;
    public UseHintMl        : bool;

    public this(useHintMl : bool)
    {
      this(CompilerMessageList(), useHintMl)
    }

    public this(compilerMessages : CompilerMessageList, useHintMl : bool)
    {
      CompilerMessages = compilerMessages;
      UseHintMl        = useHintMl;
    }

    public Visit(parseTree : IAst) : void
    {
      parseTree.Accept(this);
    }

    public Visit(reference : Reference) : void implements IAstVisitor.Visit
    {
      when (reference.IsRefEvaluated)
      {

        def processRef(r : IRef)
        {
          if (r.IsResolvedToEvaluated)
            processRef(r.ResolvedTo);
          else if (r.IsUnresolved)
            CompilerMessages.Error(reference, $"Unresolved reference '$reference'");
          else when (r.IsAmbiguous && !r.IgnoreAmbiguities)
          {
            def message =
              if (UseHintMl)
              {
                StringBuilder(64).Append("<hint>'").HintMlEscape(reference).Append("' is an ambiguous reference between ")
                  .JoinAnd(r.Ambiguities, HintML.MakeHintMlPath(_, _, ".", true)).Append("</hint>").ToString();
              }
              else
              {
                def format(symbol : DeclarationSymbol) : string
                {
                  if (symbol.IsFullNameEvaluated)
                    symbol.FullName
                  else if (symbol.IsDeclaredInOptEvaluated)
                    match (symbol.DeclaredInOpt)
                    {
                      | VSome(parentSymbol) => format(parentSymbol) + "." + symbol.Name
                      | VNone               => symbol.Name
                    }
                  else
                    symbol.Name
                }

                $"'$(reference)' is an ambiguous reference between ..$(r.Ambiguities.Select(format))"
              };

            CompilerMessages.Error(reference, message);
          }
        }

        processRef(reference.Ref)
      }
    }

    public Visit(_ : Name) : void implements IAstVisitor.Visit
    {
    }

    public Visit(r : IRef) : void
    {
      _ = r;
    }
  }
}
