using Nitra.ProjectSystem;
using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public interface IExternalDeclaration
  {
  }
  
  public class ExternalDeclaration[TSymbol] : DeclarationBase, Declaration, IExternalDeclaration
    where TSymbol: DeclarationSymbol
  {
    public this(location : Location, name : string)
    {
      this(Name(location, name), false)
    }

    public this(location : Location, name : string, ignoreCase : bool)
    {
      this(Name(location, name), ignoreCase)
    }
    
    public this(name : Name)
    {
      this(name, false);
    }

    public this(name : Name, ignoreCase : bool)
    {
      Source     = name.Source;
      Span       = name.Span;
      __NameImpl = name;
      IgnoreCase = ignoreCase;
    }

    private mutable _containingTable : TableScope;

    public Name                       : Name              { get { __NameImpl } }
    public IsSymbolEvaluated          : bool              { get { __NameImpl.IsSymbolEvaluated } }
    public Symbol                     : TSymbol
    {
      get { __NameImpl.Symbol :> TSymbol }
      set { __NameImpl.Symbol = value }
    }
    public Symbol_Location : string * int * int { get; set; }

    set_Symbol(value : DeclarationSymbol) : void implements Declaration.set_Symbol
    {
      Symbol = value :> TSymbol
    }

    public IsContainingTableEvaluated : bool              { get { _containingTable : object != null } }
    public ContainingTable            : TableScope
    {
      get { assert(IsContainingTableEvaluated); _containingTable }
      set { assert(!IsContainingTableEvaluated); _containingTable = value }
    }
    public ContainingTable_Location : string * int * int { get; set; }

    public override IsParsed : bool { get { false } }

    public override IgnoreCase : bool { get; }

    public override CreateSymbol() : DeclarationSymbol
    {
      Activator.CreateInstance.[TSymbol]()
    }


    public override Accept(visitor : IAstVisitor) : void
    {
      visitor.Visit(Name);
    }

    public override ToXaml() : string
    {
      Name.ToXaml()
    }

    public DefineSymbol(containingScope : TableScope = null) : TSymbol
    {
      assert(!IsSymbolEvaluated, "External declaration already has symbol");

      if (containingScope : object != null)
        containingScope.Define(this, null)
      else
      {
        def symbol = CreateSymbol() :> TSymbol;
        symbol.AddDeclaration(this);
        Name.Symbol = symbol;
        symbol
      }
    }
  }
}
