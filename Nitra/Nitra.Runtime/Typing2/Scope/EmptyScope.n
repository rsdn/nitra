using Nitra.Serialization2;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public sealed class EmptyScope : Scope
  {
    public static Instance : EmptyScope = EmptyScope();

    private this() { }

    public override AllSymbols : Seq[DeclarationSymbol] { get { [] } }

    public override GetAllSymbols() : Seq[DeclarationSymbol] { [] }

    public override Contains(reference : string) : bool { IgnoreParams(); false }

    public override Bind[TSymbol](isMatch : Predicate[TSymbol]) : BindResult[TSymbol]
    {
      IgnoreParams();
      BindResult.Nil()
    }

    public override Bind[TSymbol](reference : Reference) : BindResult[TSymbol]
    {
      IgnoreParams();
      BindResult.Nil()
    }

    public override ToDot(nodeToIdMap : Dictionary[object, int], nodes : List[string], _edges : List[string]) : void
    {
      def id = nodeToIdMap.GetObjectId(this);
      nodes.Add($<#Obj_$id [label="EmptyScope"]#>);
    }

    public override ToString() : string
    {
      "<Empty>"
    }

    public override HideWith(scope : Scope) : Scope
    {
      scope ?? this
    }

    public override UnionWith(scope : Scope) : Scope
    {
      scope ?? this
    }

    public override FilterWith(predicate : Predicate[DeclarationSymbol]) : Scope
    {
      _ = predicate;
      this
    }

    public override Memoize() : Scope
    {
      this
    }

    public override Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void
    {
      IgnoreParams();
    }

    public static Deserialize(reader : BinaryReader, metadataReader : MetadataReader) : this
    {
      IgnoreParams();
      Instance
    }
  }
}
