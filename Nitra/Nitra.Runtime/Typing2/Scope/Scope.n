using Nitra.Serialization2;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public abstract class Scope : ISerializable
  {
    public virtual  AllSymbols : Seq[DeclarationSymbol] { get { GetAllSymbols().OrderBy(x => x.Name, StringComparer.Ordinal).ToArray() } }
    public abstract GetAllSymbols() : Seq[DeclarationSymbol];
    public abstract Bind[TSymbol](reference : Reference)        : BindResult[TSymbol] where TSymbol : DeclarationSymbol;
    public abstract Bind[TSymbol](isMatch : Predicate[TSymbol]) : BindResult[TSymbol] where TSymbol : DeclarationSymbol;
    public abstract Contains(reference : string) : bool;
    public abstract ToDot(nodeToIdMap : Dictionary[object, int], nodes : List[string], edges : List[string]) : void;
    public virtual ToDot() : string
    {
      def nodes       = List();
      def edges       = List();
      def nodeToIdMap = Dictionary();

      ToDot(nodeToIdMap, nodes, edges);

      def typeName = GetType().Name;
      def content = $<#
        digraph RecoveryParser
        {
          compound=true;
          label="$typeName";

          ..$(nodes; "\r\n          ")

          ..$(edges; "\r\n          ")
        }
      #>;
      content
    }

    public virtual HideWith(scope : Scope) : Scope
    {
      if (IsNullOrEmpty(scope))
        this
      else
        HidingScope(this, scope)
    }

    public virtual UnionWith(scope : Scope) : Scope
    {
      mutable builder = UnionScopeBuilder();
      UnionScopeBuilder.Add(this, ref builder);
      UnionScopeBuilder.Add(scope, ref builder);
      builder.ToScope();
    }

    public virtual FilterWith([NotNull] predicate : Predicate[DeclarationSymbol]) : Scope
    {
      FilteringScope(this, predicate)
    }

    public abstract Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void;

    public static IsNullOrEmpty(scope : Scope) : bool
    {
      scope : object == null || scope : object == EmptyScope.Instance
    }
  }
}
