using Nitra.Serialization2;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

namespace Nitra.Declarations
{
  public sealed class UnionScope : Scope
  {
    public Scopes : ImmutableArray[Scope] { get; }

    internal this(scopes : ImmutableArray[Scope])
    {
      Scopes = scopes;
    }

    public override GetAllSymbols() : Seq[DeclarationSymbol] { Scopes.SelectMany(scope => scope.GetAllSymbols()) }

    public override Bind[TSymbol](isMatch : Predicate[TSymbol]) : BindResult[TSymbol]
    {
      def result = LightList();
      foreach (scope in this.Scopes)
      {
        def br = scope.Bind(isMatch);
        when (br.HasResult)
          result.Add(br);
      }
      result.ToBindResult()
    }

    public override Contains(reference : string) : bool
    {
      foreach (scope when scope.Contains(reference) in this.Scopes)
        return true;
      false
    }

    public override Bind[TSymbol](reference : Reference) : BindResult[TSymbol]
    {
      def result = LightList();
      foreach (scope in this.Scopes)
      {
        def br = scope.Bind(reference);
        when (br.HasResult)
          result.Add(br);
      }
      result.ToBindResult()
    }

    public override ToDot(nodeToIdMap : Dictionary[object, int], nodes : List[string], edges : List[string]) : void
    {
      def id = nodeToIdMap.GetObjectId(this);

      nodes.Add($<#Obj_$id [label="UnionScope"]#>);
      foreach (scope in Scopes)
      {
        edges.Add($<#Obj_$id -> Obj_$(nodeToIdMap.GetObjectId(scope))#>);
        scope.ToDot(nodeToIdMap, nodes, edges);
      }
    }

    public override ToString() : string
    {
      $<# UnionScope($(Scopes.Length))#>
    }

    public override Equals(other : object) : bool
    {
      | UnionScope(Scopes = otherScopes) =>
        // TODO: use LightSet[T]
        this.Scopes.Length == otherScopes.Length && HashSet(this.Scopes).SetEquals(otherScopes)

      | _ => false
    }

    public override GetHashCode() : int
    {
      unchecked
      {
        mutable acc = Scopes.Length << 2;
        foreach (s in Scopes)
          acc ^= s.GetHashCode();
        acc
      }
    }

    public override UnionWith(scope : Scope) : Scope
    {
      if (IsNullOrEmpty(scope))
        this
      else
      {
        mutable builder = UnionScopeBuilder(Scopes);
        UnionScopeBuilder.Add(scope, ref builder);
        builder.ToScope();
      }
    }

    public override Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void
    {
      metadataWriter.WriteObjects(Scopes, writer);
    }

    public static Deserialize(reader : BinaryReader, metadataReader : MetadataReader) : this
    {
      def scopes = metadataReader.ReadObjects(reader);
      UnionScope(ImmutableArray.Create(scopes));
    }
  }
}
