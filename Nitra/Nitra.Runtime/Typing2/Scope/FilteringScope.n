using Nitra.Serialization2;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  [Record, StructuralEquality]
  public sealed class FilteringScope : Scope
  {
    public Scope     : Scope                         { get; }
    public Predicate : Predicate[DeclarationSymbol] { get; }

    public override GetAllSymbols() : Seq[DeclarationSymbol]
    {
        foreach (symbol when this.Predicate(symbol) in this.Scope.GetAllSymbols())
          yield symbol;
    }

    public override Contains(reference : string) : bool
    {
      when (Scope.Contains(reference))
      {
        def res = Scope.Bind(Reference(Location.Default, reference));
        //TODO: optimize
        return res.Filter(this.Predicate).HasResult;
      }

      false
    }

    public override Bind[TSymbol](isMatch : Predicate[TSymbol]) : BindResult[TSymbol]
    {
      def compositePredicate(symbol)
      {
        this.Predicate(symbol) && isMatch(symbol)
      }
      def res = Scope.Bind(compositePredicate);
      res
    }

    public override Bind[TSymbol](reference : Reference) : BindResult[TSymbol]
    {
      def res = Scope.Bind(reference);
      //TODO: optimize
      res.Filter(this.Predicate)
    }

    public override ToDot(nodeToIdMap : Dictionary[object, int], nodes : List[string], edges : List[string]) : void
    {
      def id            = nodeToIdMap.GetObjectId(this);
      def idScope       = nodeToIdMap.GetObjectId(this.Scope);

      nodes.Add($<#Obj_$id [label="FilteringScope"]#>);
      edges.Add($<#Obj_$id -> Obj_$idScope#>);

      this.Scope.ToDot(nodeToIdMap, nodes, edges);
    }

    public override ToString() : string
    {
      "Filter"
    }

    public override FilterWith(predicate : Predicate[DeclarationSymbol]) : Scope
    {
      if (this.Predicate == predicate)
        this
      else
        FilteringScope(this.Scope, symbol => this.Predicate(symbol) && predicate(symbol))
    }

    public override UnionWith(scope : Scope) : Scope
    {
      // filter(s1, p) + filter(s2, p) -> filter(s1 + s2, p)
      if (scope is FilteringScope(Scope = otherScope, Predicate = otherPred) when this.Predicate == otherPred)
        Scope.UnionWith(otherScope).FilterWith(this.Predicate)
      else
        base.UnionWith(scope)
    }

    public override Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void
    {
      metadataWriter.WriteObject(Scope, writer);

      def method = this.Predicate.Method;
      metadataWriter.WriteType(method.DeclaringType, writer);
      writer.Write(method.Name);

      if (method.IsStatic)
        metadataWriter.WriteObject(null, writer);
      else if (this.Predicate.Target is ISerializable as target)
        metadataWriter.WriteObject(target, writer);
      else
        assert(false, $"Cannot serialize predicate '$(this.Predicate)': method must be static or target must implement interface 'Nitra.Serlialization2.ISerializable'.")
    }

    public static Deserialize(reader : BinaryReader, metadataReader : MetadataReader) : this
    {
      def scope      = metadataReader.ReadObject(reader);
      def type       = metadataReader.ReadType(reader);
      def name       = reader.ReadString();
      def target     = metadataReader.ReadObject(reader);
      def methodInfo = type.GetMethod(name, array[typeof(DeclarationSymbol)]);
      assert(methodInfo : object != null, $"Method '$(name)' not found in type '$(type)'.");
      def predicate  = Delegate.CreateDelegate(typeof(Predicate[DeclarationSymbol]), target, methodInfo) :> Predicate[DeclarationSymbol];
      FilteringScope(scope, predicate)
    }
  }
}
