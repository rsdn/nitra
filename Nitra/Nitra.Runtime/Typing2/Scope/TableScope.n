using Nitra.CompilerMessagesExtensions;
using Nitra.Internal;
using Nitra.ProjectSystem;
using Nitra.Serialization2;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;

namespace Nitra.Declarations
{
  public class TableScope : Scope
  {
    protected         _owner                   : DeclarationSymbol;
    protected         _name                    : string;
    protected         _caseSensitiveTable      : Hashtable[int, list[DeclarationSymbol]];
    protected         _caseInsensitiveTable    : Hashtable[int, list[DeclarationSymbol]];
    protected mutable _extensionMethodsModules : list[DeclarationSymbol] = [];

    public this(name : string)
    {
      this(null, name);
    }

    public this(owner : DeclarationSymbol, name : string)
    {
      _owner     = owner;
      _name      = name;
      _caseSensitiveTable = Hashtable();
      _caseInsensitiveTable = Hashtable();
    }

    public Owner   : DeclarationSymbol { get { _owner } }
    public Name    : string            { get { _name } }
    public IsEmpty : bool              { get { (_caseSensitiveTable.Count + _caseInsensitiveTable.Count) == 0 } }

    public virtual Symbols : Seq[list[DeclarationSymbol]]
    {
      get
      {
        match (_caseSensitiveTable.Count, _caseInsensitiveTable.Count)
        {
          | (0, 0) => Enumerable.Empty()
          | (_, 0) => _caseSensitiveTable.Values
          | (0, _) => _caseInsensitiveTable.Values
          | _      => _caseSensitiveTable.Values.Concat(_caseInsensitiveTable.Values)
        }
      }
    }

    public override GetAllSymbols() : Seq[DeclarationSymbol]
    {
      foreach (lst in _caseSensitiveTable.Values)
        foreach (s in lst)
          yield s;

      foreach (lst in _caseInsensitiveTable.Values)
        foreach (s in lst)
          yield s;
    }

    public virtual Define[TSymbol](declaration : Declaration, context : DependentPropertyEvalContext, name : Name = null) : TSymbol
      where TSymbol : DeclarationSymbol
    {
      when (name != null)
        (declaration :> DeclarationBase).UpdateName(name);

      def     name2  : Name    = declaration.Name;
      def     candidateSymbols = LightList();
      mutable ambiguousSymbols : HashSet[DeclarationSymbol];

      mutable table          = _caseSensitiveTable;
      mutable alternateTable = _caseInsensitiveTable;
      mutable id             = StringIndex.GetCaseSensitivePart(name2.Id);
      mutable alternateId    = StringIndex.GetCaseInsensitivePart(name2.Id);

      when (declaration.IgnoreCase)
      {
        table <-> alternateTable;
        id <-> alternateId;
      }

      mutable lookupResult;
      when (table.TryGetValue(id, out lookupResult))
      {
        ambiguousSymbols = HashSet(lookupResult);
        foreach (symbol is TSymbol when symbol.CanMerge(declaration) in lookupResult)
          candidateSymbols.Add(symbol);
      }

      def concreteSymbol =
        match (candidateSymbols.Count)
        {
          | 0 =>
            def newSymbol = declaration.CreateSymbol();
            (newSymbol :> SymbolBase).Owner = this;
            newSymbol :> TSymbol;

          | 1 => candidateSymbols.FirstItem // merge
          | _ => assert(false)
        };


      if (ambiguousSymbols : object == null)
      {
        table.Add(id, [concreteSymbol]);

        when (alternateTable.TryGetValue(alternateId, out lookupResult))
          ReportRedefinition(name2, declaration, context, "Redefinition of '{0}' with different case sensitivity.",
            lookupResult.FilterToArray(s => s is TSymbol && s.IsSameIdentity(declaration)));
      }
      else when (ambiguousSymbols.Add(concreteSymbol))
      {
        // фильтруем без учета конкретного типа
        ReportRedefinition(name2, declaration, context, "Redefinition of '{0}'.",
          ambiguousSymbols.FilterToArray(s => !concreteSymbol.Equals(s) && s.IsSameIdentity(declaration)));

        table[id] = ambiguousSymbols.NToList();
      }

      concreteSymbol.AddDeclaration(declaration);
      when (context : object != null)
      when (candidateSymbols.Count == 0)
        concreteSymbol.EvalProperties(context); // initialize symbol default values

      assert(!name2.IsSymbolEvaluated);
      name2.Symbol = concreteSymbol;

      concreteSymbol
    }

    public virtual Undefine(shouldRemove : Predicate[Declaration]) : void
    {
      def undefine(lst : list[DeclarationSymbol]) : list[DeclarationSymbol]
      {
        | []      => []
        | x :: xs =>
          assert(x.Owner : object == this, $"Symbol '$x' is not defined in table scope.");

          def survivedDeclarations = x.RemoveDeclarations(shouldRemove);
          if (survivedDeclarations > 0)
          {
            def newXs = undefine(xs);
            if (newXs : object != xs)
              x :: newXs
            else
              lst
          }
          else
          {
            (x :> SymbolBase).Owner = null;
            undefine(xs)
          }
      }

      def updateTable(table : Hashtable[_, _])
      {
        when (table.Count > 0)
        foreach (pair in table.ToArray())
        {
          def newList = undefine(pair.Value);

          when (newList : object != pair.Value)
            if (newList.IsEmpty)
              table.Remove(pair.Key);
            else
              table[pair.Key] = newList;
        }
      }

      updateTable(_caseSensitiveTable);
      updateTable(_caseInsensitiveTable);
    }

    public override Contains(reference : string) : bool
    {
      def id = StringIndex.GetId(reference);

      mutable lookupResult;
      when (_caseSensitiveTable.TryGetValue(StringIndex.GetCaseSensitivePart(id), out lookupResult))
        return !lookupResult.IsEmpty;

      when (_caseInsensitiveTable.TryGetValue(StringIndex.GetCaseInsensitivePart(id), out lookupResult))
        return !lookupResult.IsEmpty;

        false
      }

    public override Bind[TSymbol](isMatch : Predicate[TSymbol]) : BindResult[TSymbol]
    {
      def res = LightList();

      foreach (symbols in _caseSensitiveTable.Values)
      foreach (symbol is TSymbol when isMatch(symbol) in symbols)
        res.Add(symbol);

      foreach (symbols in _caseInsensitiveTable.Values)
      foreach (symbol is TSymbol when isMatch(symbol) in symbols)
        res.Add(symbol);

      res.ToBindResult()
    }

    public override Bind[TSymbol](reference : Reference) : BindResult[TSymbol]
    {
      def res = LightList();

      mutable lookupResult;
      when (_caseSensitiveTable.TryGetValue(StringIndex.GetCaseSensitivePart(reference.Id), out lookupResult))
        foreach (x is TSymbol in lookupResult)
          res.Add(x);

      when (_caseInsensitiveTable.TryGetValue(StringIndex.GetCaseInsensitivePart(reference.Id), out lookupResult))
        foreach (x is TSymbol in lookupResult)
          res.Add(x);

        res.ToBindResult()
    }

    public override ToDot(nodeToIdMap : Dictionary[object, int], nodes : List[string], _edges : List[string]) : void
    {
      def id = nodeToIdMap.GetObjectId(this);
      def symbols = AllSymbols.ToArray();

      // make DOT HTML table for symbols

      def maxCols = 6;
      def last = symbols.Length - 1;
      mutable cols = Math.Min(maxCols, symbols.Length);
      mutable rows = symbols.Length / cols;
      when (symbols.Length % cols != 0)
        rows++;

      def builder = StringBuilder();
      def owner = if (Owner == null) ""
                  else
                  {
                    "Owner: " + (if (Owner.IsKindEvaluated) " <FONT COLOR='blue'>" + Owner.Kind + "</FONT>&nbsp;" else "")
                    + AstUtils.XmlEscape(if (Owner.IsFullNameEvaluated) Owner.FullName else Owner.InitialName);
                  };
      _ = builder.Append(
$<#<table border='0' cellspacing='0' cellpadding='3' bgcolor='lightskyblue'>
<tr>
  <td colspan="$cols" align="center" bgcolor="WhiteSmoke" border='1'>TableScope: '<B>$(AstUtils.XmlEscape(_name))</B>' $owner</td>
</tr>
#>);
      for (mutable row = 0; row < rows; row++)
      {
        _ = builder.Append("  <tr>\r\n");
        for (mutable col = 0; col < cols; col++)
        {
          def i = row * cols + col;
          if (i > last)
            _ = builder.Append("    <td border='1'></td>\r\n");
          else
          {
            def symbol  = symbols[i];
            def content = if (symbol.IsKindEvaluated) "<FONT COLOR='blue'>" + symbol.Kind + "</FONT><BR/>" + AstUtils.XmlEscape(symbol.InitialName) else AstUtils.XmlEscape(symbol.InitialName);
            _ = builder.Append($"    <td border='1'>$content</td>\r\n");
          }
        }
        _ = builder.Append("  </tr>\r\n");
      }

      _ = builder.Append(<#
</table>#>);

      nodes.Add($<#Obj_$id [shape=none label=<$builder>]#>);
    }

    public override ToString() : string
    {
      $<#TableScope($(AllSymbols.Count()))]#>
    }

    internal EnqueueSymbols(metadataWriter : MetadataWriter) : void
    {
      foreach (pair in _caseSensitiveTable)
        foreach (s when s.HasParsedDeclarations in pair.Value)
          metadataWriter.EnqueueSymbol(s);

      foreach (pair in _caseInsensitiveTable)
        foreach (s when s.HasParsedDeclarations in pair.Value)
          metadataWriter.EnqueueSymbol(s);
    }

    public override Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void
    {
      metadataWriter.WriteObject(_owner, writer);
      when (metadataWriter.BeginWriteObject(this, writer))
      {
        writer.Write(_name : string);
        EnqueueSymbols(metadataWriter);
      }
    }

    public static Deserialize(reader : BinaryReader, metadataReader : MetadataReader) : this
    {
      // TODO: сделать более эффективной десериализацию
      def owner = metadataReader.ReadObject.[DeclarationSymbol](reader);
      mutable scope;
      _ = metadataReader.BeginReadObject(reader, out scope, GetTableScope(owner));
      scope
    }

    private static GetTableScope(owner : DeclarationSymbol) : Func[BinaryReader, MetadataReader, TableScope]
    {
      fun (reader, _metadataReader)
      {
        def name  = reader.ReadString();
        if (owner == null)
          TableScope(name)
        else
        {
          def result = owner.GetTable(name);
          assert(result.HasValue, $"Table '$name' not found in symbol '$owner'");
          result.GetValueOrDefault()
        }
      }
    }

    private static ReportRedefinition(name : Name, _declaration : Declaration, context : DependentPropertyEvalContext, formatString : string, ambiguousSymbols : array[DeclarationSymbol]) : void
    {
      when (ambiguousSymbols.IsEmpty())
        return;

      try
      {
        if (context == null)
          Debug.WriteLine(string.Format(formatString + ". FIXME: Forward context!", name))
        else
        {
          def message = string.Format(formatString, name);
          using (nested = GetCompilerMessage(context, name).ReportRootMessage(CompilerMessageType.Error, name.Location, message, -1))
            foreach (ambiguous in ambiguousSymbols)
              foreach (d in ambiguous.Declarations)
                nested.Hint(d.Name, "previous definition.");
        }
      }
      catch { _ => assert2(false); }
    }
  }
}
