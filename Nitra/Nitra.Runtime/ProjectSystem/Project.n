using System.Collections.Concurrent;
using System.Threading;
using Nitra.Declarations;
using Nitra.Typing;
using Nitra.Internal;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Reflection;
using System.Linq;

namespace Nitra.ProjectSystem
{
  public abstract class Project : ICompilerMessages, ISymbolCache
  {
    private _assemblies : List[AssemblyName] = List();
    protected _symbolsCache : ConcurrentDictionary[int, DeclarationSymbol] = ConcurrentDictionary();
    public CompilerMessages : ICompilerMessages { get; }
    public RootNamespace : OldNamespaceSymbol { get; private set; }
    public Data : object { get; set; }
    public abstract Files : Seq[File] { get; }
    public virtual Solution : Solution { get; protected set; }
    public virtual Libs : Seq[LibReference] { get; protected set; }
    public ProjectDir : string { get; protected set; }
    public event OnSymbolAssemblyResolve : Func[Project, AssemblyName, Assembly];
    public virtual UseHintMl : bool { get { true } }

    protected this()
    {
      CompilerMessages = CompilerMessageList();
    }

    protected this([NotNull] compilerMessages : ICompilerMessages)
    {
      CompilerMessages = compilerMessages;
    }

    public virtual Init(referencedAssemblies : Seq[AssemblyName]) : void
    {
      _assemblies.Clear();

      repeat(AssemblyIds.ReservedIdsCount)
        _assemblies.Add(null);

      _assemblies.AddRange(referencedAssemblies);

      def root = HierarchyNode(this);
      def rootNamespace = OldNamespaceSymbol(null : string);
      root.SetRootNamespaceSymbol(rootNamespace);
      RootNamespace = rootNamespace;
    }

    internal ResolveSymbolAssembly(fullName : string) : Assembly
    {
      def targetName = AssemblyName(fullName);
      foreach (assembly in AppDomain.CurrentDomain.GetAssemblies())
      {
        def currentName = assembly.GetName();
        when (StringComparer.OrdinalIgnoreCase.Equals(targetName.Name, currentName.Name))
        when (currentName.Version >= targetName.Version)
          return assembly;
      }

      OnSymbolAssemblyResolve?.Invoke(this, targetName) ?? Assembly.Load(targetName)
    }

    public GetAssemblyName(assemblyId : byte) : AssemblyName
    {
      _assemblies[assemblyId]
    }

    [Memoize]
    public GetAssemblyId(assemblyName : AssemblyName) : byte
    {
      def arrayEquals(a : array[byte], b : array[byte]) : bool
      {
        when (ReferenceEquals(a, b))
          return true;
        when (a == null || b == null)
          return false;
        when (a.Length != b.Length)
          return false;
        for(mutable i = 0; i < a.Length; ++i)
          when (a[i] != b[i])
            return false;
        true
      }

      mutable nearestVersion = Version();
      mutable result = AssemblyIds.NoAssembly;
      for (mutable index = AssemblyIds.ReservedIdsCount; index < _assemblies.Count; ++index)
      {
        def n = _assemblies[index];
        when (n.Name == assemblyName.Name && arrayEquals(n.GetPublicKeyToken(), assemblyName.GetPublicKeyToken()))
        {
          when (n.Version == assemblyName.Version)
            return index :> byte;

          when (n.Version > assemblyName.Version && n.Version >= nearestVersion)
            result = index :> byte;
        }
      }
      result
    }

    public virtual GetProjectSupport() : IProjectSupport
    {
      def files = Files.ToArray();

      when (files.Length == 0)
        return null;

      def fileWithAst = files.FirstOrDefault(f => f.Ast != null);

      when (fileWithAst == null)
        return null;

      match (fileWithAst.Ast)
      {
        | x is IProjectSupport => x
        | x =>
          Trace.WriteLine($"The $(x.GetType().FullName) not support IProjectSupport.");
          null
      }
    }

    public UpdateProperties() : void { UpdateProperties(default(CancellationToken)) }

    public virtual UpdateProperties(cancellationToken : CancellationToken) : void
    {
      def files = Files.ToArray();

      when (files.Length == 0)
        return;

      foreach (file in files)
        file.DeepResetProperties();

      def projectSupport = GetProjectSupport();
      when (projectSupport != null)
      {
        this.Data = projectSupport.RefreshReferences(cancellationToken, this);
        projectSupport.RefreshProject(cancellationToken, File.GetEvalPropertiesData(files), this.Data);
      }
    }

    public virtual EvalProperties(context : DependentPropertyEvalContext, passName : string, stage : int) : void
    {
      def evalHost = ProjectEvalPropertiesHost(File.GetEvalPropertiesData(this.Files));
      evalHost.EvalProperties(context, passName, stage);
    }

    public virtual AddSymbolRef(_symbol : Symbol, _loc : Location) : void
    {
    }

    public virtual AddSymbolDef(_symbol : Symbol, _loc : Location) : void
    {
    }

    public ReportMessage(messageType : CompilerMessageType, loc : Location, msg : string, num : int) : void
    {
      CompilerMessages.ReportMessage(messageType, loc, msg, num)
    }

    public ReportRootMessage(messageType : CompilerMessageType, loc : Location, msg : string, num : int) : IRootCompilerMessages
    {
      CompilerMessages.ReportRootMessage(messageType, loc, msg, num)
    }

    public SetFutureMessagesKind(kind : Guid) : void { CompilerMessages.SetFutureMessagesKind(kind); }
    public Remove(predicate : Func[Guid, Location, bool]) : void { CompilerMessages.Remove(predicate); }

    public CacheSymbol(symbol : DeclarationSymbol) : void { _symbolsCache[symbol.Id] = symbol; }
    public TryGetSymbolById(id : int) : DeclarationSymbol
    {
    	mutable value;
    	_ = _symbolsCache.TryGetValue(id, out value);
    	value
    }
  } // class
} // namespace
