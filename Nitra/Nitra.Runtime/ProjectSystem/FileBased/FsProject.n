using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;

using System;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Linq;

namespace Nitra.ProjectSystem
{
  public class FsProject[TAst] : Project
    where TAst: IAst
  {
    public FsSolution : FsSolution[TAst]                   { get; internal set; }
    public FsFiles    : ObservableCollection[FsFile[TAst]] { get; private set; }
    public override UseHintMl : bool { get { false } }

    public this([NotNull] solution : FsSolution[TAst], projectDir : string, libs : Seq[LibReference])
    {
      base();
      FsFiles = ObservableCollection();
      FsFiles.CollectionChanged += OnCollectionChanged;
      solution.FsProjects.Add(this);
      Libs = libs;
      ProjectDir = projectDir;
    }

    public this([NotNull] solution : FsSolution[TAst], projectDir : string, [NotNull] files : Seq[FsFile[TAst]], libs : Seq[LibReference])
    {
      this(solution, projectDir, libs);
      foreach (file in files)
        this.FsFiles.Add(file);
    }

    public this([NotNull] solution : FsSolution[TAst], projectDir : string, [NotNull] file : FsFile[TAst], libs : Seq[LibReference])
    {
      this(solution, projectDir, libs);
      this.FsFiles.Add(file);
    }

    public override Files : Seq[File]
    {
      get { this.FsFiles }
    }

    OnCollectionChanged(_sender : object, e : NotifyCollectionChangedEventArgs) : void
    {
      when (e.OldItems != null)
      {
        foreach(oldItem is FsFile[TAst] in e.OldItems)
        {
          oldItem.FsProject = null;
          //oldItem.PropertyChanged -= this.OnItemPropertyChanged;
        }
      }

      when (e.NewItems != null)
      {
        foreach(newItem is FsFile[TAst] in e.NewItems)
        {
          def oldProj = newItem.FsProject;
          when (oldProj != null)
            _ = oldProj.FsFiles.Remove(newItem);
          newItem.FsProject = this;
          //Add listener for each item on PropertyChanged event
          //newItem.PropertyChanged += this.OnItemPropertyChanged;
        }
      }
    }

    //OnItemPropertyChanged(sender : object, e : PropertyChangedEventArgs) : void
    //{
    //  when (sender is FsFile as item)
    //    ModifiedItems.Add(item);
    //}
  }
}
