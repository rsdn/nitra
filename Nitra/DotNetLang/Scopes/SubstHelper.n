using Nitra;
using Nitra.Declarations;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Immutable;
using System.Diagnostics;

using System.Linq;
using SCG = System.Collections.Generic;

namespace DotNet
{
  public partial class TopSubstScope : Scope
  {
    private static GetContext() : DependentPropertyEvalContext
    {
      DependentPropertyEvalContext.Current ?? DependentPropertyEvalContext(null);
    }

    private static Init[T](subst : T, origin : SymbolBase) : void
      where T: SymbolBase, IDependentPropertyContainer
    {
      subst.EvalProperties(GetContext());
      subst.SetOrigin(origin);
    }

    public TrySubst(origin : TypeSymbol) : TypeSymbol
    {
      match (origin)
      {
        | TypeParameterSymbol as parameterSymbol => TrySubstTypeParameterSymbol(parameterSymbol)
        | FunctionTypeSymbol as func => TrySubst(func)
        | ConstructedTypeSymbol as cts =>
          def typeInfo      = cts.TypeInfo;
          def args          = cts.Args;
          def substArgs     = TrySubsts(args);
          def isNotChanged  = args.Equals(substArgs);
          match (cts)
          {
            | TopConstructedTypeSymbol when isNotChanged => cts
            | TopConstructedTypeSymbol           => AstUtils.CreateConstructedTypeSymbol(typeInfo, substArgs, GetContext())
            //| NestedConstructedTypeSymbol as cts when isNotChanged
            | NestedConstructedTypeSymbol as cts =>  AstUtils.CreateNestedConstructedTypeSymbol(cts.Parent, typeInfo, substArgs, GetContext())
            | _ => assert2(false); assert(false)
          }

        | GenericContainerTypeSymbol as gts =>
          def substArgs = TrySubsts(gts.TypeParameters);
          AstUtils.CreateConstructedTypeSymbol(gts, substArgs, GetContext())

        | _ => origin
      }
    }

    private TrySubsts(types : ImmutableArray[TypeSymbol]) : ImmutableArray[TypeSymbol]
    {
      def builder = ImmutableArray.CreateBuilder(types.Length);
      foreach (type in types)
        builder.Add(TrySubst(type));
      builder.MoveToImmutable()
    }

    public SubstMethod(origin : Member.MethodSymbol) : Member.MethodSymbol
    {
      def subst = Member.MethodSymbol();
      SubstTypeMember         (subst, origin);
      CopyDeclaration         (subst, origin);
      SubstCustomAttributeHost(subst, origin);
      SubstModifierHost       (subst, origin);
      SubstFunctional         (subst, origin);
      SubstGenericEntity      (subst, origin);
      when (origin.IsIsExtensionMethodEvaluated)
      {
        subst.IsExtensionMethod = origin.IsExtensionMethod;
        subst.IsExtensionMethod_Location = origin.IsExtensionMethod_Location;
      }
      Init(subst, origin);
      subst
    }

    public SubstProperty(origin : Member.PropertySymbol) : Member.PropertySymbol
    {
      def subst = Member.PropertySymbol();
      CopyDeclaration         (subst, origin);
      SubstCustomAttributeHost(subst, origin);
      SubstModifierHost       (subst, origin);
      SubstTypeMember         (subst, origin);
      when (origin.IsTypeEvaluated)
      {
        subst.Type = TrySubst(origin.Type);
        subst.Type_Location = origin.Type_Location;
      }
      when (origin.IsGetterEvaluated)
      {
        if (origin.Getter is Some(value))
          subst.Getter = Some(SubstMethod(value));
        else
          subst.Getter = None();
        subst.Getter_Location = origin.Getter_Location;
      }
      when (origin.IsSetterEvaluated)
      {
        if (origin.Setter is Some(value))
          subst.Getter = Some(SubstMethod(value));
        else
          subst.Getter = None();
        subst.Setter_Location = origin.Setter_Location;
      }
      Init(subst, origin);
      subst
    }

    private TrySubst(origin : FunctionTypeSymbol) : FunctionTypeSymbol
    {
      mutable isNotChanged;
      mutable parameterTypesSubsts;
      mutable returnSubst;

      when (origin.IsParametersEvaluated)
      {
        parameterTypesSubsts = TrySubsts(origin.Parameters);

        isNotChanged = parameterTypesSubsts.SequenceEqual(origin.Parameters);
      }

      when (origin.IsReturnEvaluated)
      {
        returnSubst = TrySubst(origin.Return);
        isNotChanged &= returnSubst.Equals(origin.Return);
      }

      if (isNotChanged)
        origin
      else
      {
        def subst = FunctionTypeSymbol();
        CopyDeclaration(subst, origin);
        when (!parameterTypesSubsts.IsDefault)
          subst.Parameters = parameterTypesSubsts;
        when (returnSubst != null)
          subst.Return = returnSubst;
        Init(subst, origin);
        subst
      }
    }

    private TrySubstTypeParameters(typeParameters : ImmutableArray[TypeSymbol]) : ImmutableArray[TypeSymbol]
    {
      def builder = ImmutableArray.CreateBuilder(typeParameters.Length);
      foreach (type in typeParameters)
        builder.Add(TrySubst(type));
      builder.MoveToImmutable()
    }

    private CopyDeclaration(subst : DeclarationSymbol, origin : DeclarationSymbol) : void
    {
      foreach (decl in origin.GetDeclarationsUntyped())
        subst.AddDeclaration(decl);

      when (origin.IsKindEvaluated)
      {
        subst.Kind                   = origin.Kind;
        subst.Kind_Location          = origin.Kind_Location;
      }
      when (origin.IsSpanClassEvaluated)
      {
        subst.SpanClass              = origin.SpanClass;
        subst.SpanClass_Location     = origin.SpanClass_Location;
      }
      when (origin.IsScopeEvaluated)
      {
        subst.Scope                  = origin.Scope;
        subst.Scope_Location         = origin.Scope_Location;
      }
      when (origin.IsDeclaredInOptEvaluated)
      {
        subst.DeclaredInOpt          = origin.DeclaredInOpt;
        subst.DeclaredInOpt_Location = origin.DeclaredInOpt_Location;
      }
    }

    private SubstCustomAttributeHost(subst : CustomAttributeHostDeclarationSymbol, origin : CustomAttributeHostDeclarationSymbol) : void
    {
      when (origin.IsCustomAttributesEvaluated)
      {
        subst.CustomAttributes          = origin.CustomAttributes;
        subst.CustomAttributes_Location = origin.CustomAttributes_Location;
      }
    }

    private SubstModifierHost(subst : ModifierHostSymbol, origin : ModifierHostSymbol) : void
    {
      when (origin.IsFlagsEvaluated)
      {
        subst.Flags = origin.Flags;
        subst.Flags_Location = origin.Flags_Location;
      }
    }

    private SubstFormalParameter(origin : FormalParameterSymbol) : FormalParameterSymbol
    {
      def subst = FormalParameterSymbol();
      CopyDeclaration(subst, origin);
      SubstCustomAttributeHost(subst, origin);
      when (origin.IsTypeEvaluated)
      {
        subst.Type = TrySubst(origin.Type);
        subst.Type_Location = origin.Type_Location;
      }
      when (origin.IsModifierEvaluated)
      {
        subst.Modifier = origin.Modifier;
        subst.Modifier_Location = origin.Modifier_Location;
      }
      when (origin.IsIndexEvaluated)
      {
        subst.Index = origin.Index;
        subst.Index_Location = origin.Index_Location;
      }
      Init(subst, origin);
      subst
    }

    private SubstFormalParameters(parameters : ImmutableArray[FormalParameterSymbol]) : ImmutableArray[FormalParameterSymbol]
    {
      def builder = ImmutableArray.CreateBuilder(parameters.Length);
      foreach (type in parameters)
        builder.Add(SubstFormalParameter(type));
      builder.MoveToImmutable()
    }

    private SubstTypeMember(subst : TypeMemberSymbol, origin : TypeMemberSymbol) : void
    {
      when (origin.IsDeclaredInEvaluated)
      {
        subst.DeclaredIn          = TrySubst(origin.DeclaredIn);
        subst.DeclaredIn_Location = origin.DeclaredIn_Location;
      }
      when (origin.IsDeclaredInOptEvaluated)
      {
        subst.DeclaredInOpt          = VSome(subst.DeclaredIn);
        subst.DeclaredInOpt_Location = origin.DeclaredInOpt_Location;
      }
    }

    private SubstParameterizable(subst : FunctionalSymbol, origin : FunctionalSymbol) : void
    {
      // TODO: Надо сделать подстановку для table ParameterScope;
      when (origin.IsParametersEvaluated)
      {
        subst.Parameters = SubstFormalParameters(origin.Parameters);
        subst.Parameters_Location = origin.Parameters_Location;
      }
    }

    private SubstFunctional(subst : FunctionalSymbol, origin : FunctionalSymbol) : void
    {
      SubstParameterizable(subst, origin);

      when (origin.IsReturnTypeEvaluated)
      {
        subst.ReturnType = TrySubst(origin.ReturnType);
        subst.ReturnType_Location = origin.ReturnType_Location;
      }
      when (origin.IsTypeEvaluated)
      {
        subst.Type = TrySubst(origin.Type);
        subst.Type_Location = origin.Type_Location;
      }
      when (origin.IsFunctionTypeEvaluated)
      {
        subst.Type = subst.Type;
        subst.Type_Location = origin.FunctionType_Location;
      }
    }

    private SubstGenericEntity(subst : GenericEntitySymbol, origin : GenericEntitySymbol) : void
    {
      when (origin.IsTypeParametersCountEvaluated)
      {
        subst.TypeParametersCount = origin.TypeParametersCount;
        subst.TypeParametersCount_Location = origin.TypeParametersCount_Location;
      }
      when (origin.IsTypeParametersEvaluated)
      {
        subst.TypeParameters = TrySubstTypeParameters(origin.TypeParameters);
        subst.TypeParameters_Location = origin.TypeParameters_Location;
      }
    }
  } // module
} // namespace
