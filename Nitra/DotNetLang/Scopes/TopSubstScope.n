using Nitra;
using Nitra.Declarations;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Immutable;
using System.Diagnostics;

using SCG = System.Collections.Generic;

namespace DotNet
{
  public partial class TopSubstScope : Scope
  {
    private _typeInfo      : GenericTypeSymbol;
    private _args          : ImmutableArray[TypeSymbol];
    private _typeParamsMap : Hashtable[int, TypeSymbol];

    public this(typeInfo : GenericTypeSymbol, nestedScope : Scope, args : ImmutableArray[TypeSymbol]) { this(typeInfo, args) }

    public this(typeInfo : GenericTypeSymbol, args : ImmutableArray[TypeSymbol])
    {
      _typeInfo = typeInfo;
      _args     = args;

      def typeParams    = typeInfo.TypeParameters;
      def typeParamsMap = Hashtable();
      //assert2(args.Length == typeParams.Length);
      // TODO: Add support of parent type type parameters.
      foreach (tp in typeParams with i)
        typeParamsMap[tp.Id] = args[i];

      _typeParamsMap = typeParamsMap;
    }

    // TODO: add type subst
    public override GetAllSymbols() : Seq[DeclarationSymbol]{ _typeInfo.Scope.GetAllSymbols() }

    public virtual TrySubstTypeParameterSymbol(parameterSymbol : TypeParameterSymbol) : TypeSymbol
    {
      mutable result;
      if (_typeParamsMap.TryGetValue(parameterSymbol.Id, out result))
        result
      else
      {
        assert2(false, "Unmapped TypeParameterSymbol!");
        parameterSymbol
      }
    }

    public override Contains(reference : string) : bool
    {
      _typeInfo.Scope.Contains(reference)
    }

    public override Bind[TSymbol](reference : Reference) : BindResult[TSymbol]
    {
      def result = _typeInfo.Scope.Bind.[TSymbol](reference);
      def symbols = result.GetSymbols();

      def res = LightList();
      foreach (x in symbols)
      {
        | method   is Member.MethodSymbol   => res.Add(SubstMethod(method) :> TSymbol);
        | property is Member.PropertySymbol => res.Add(SubstProperty(property) :> TSymbol);
        | _ => ()
      }
      res.ToBindResult()
    }

    public override Bind[TSymbol](isMatch : Predicate[TSymbol]) : BindResult[TSymbol]
    {
      _typeInfo.Scope.Bind.[TSymbol](isMatch)
    }

    public override ToDot(nodeToIdMap : SCG.Dictionary[object, int], nodes : SCG.List[string], edges : SCG.List[string]) : void
    {
      def id      = nodeToIdMap.GetObjectId(this);
      def idScope = nodeToIdMap.GetObjectId(this._typeInfo.Scope);

      nodes.Add($<#Obj_$id [label="TopSubstScope $id"]#>);
      edges.Add($<#Obj_$id -> Obj_$idScope#>);

      this._typeInfo.Scope.ToDot(nodeToIdMap, nodes, edges);
    }

    public override Serialize(writer : System.IO.BinaryWriter, metadataWriter : Nitra.Serialization2.MetadataWriter) : void
    {
      metadataWriter.WriteObject(_typeInfo, writer);
      metadataWriter.WriteObjects(_args, writer);
    }

    protected static Read(reader : System.IO.BinaryReader, metadataReader : Nitra.Serialization2.MetadataReader) : GenericTypeSymbol * array[TypeSymbol]
    {
      def typeInfo = metadataReader.ReadObject(reader);
      def args     = metadataReader.ReadObjects(reader);
      (typeInfo, args)
    }

    public static Deserialize(reader : System.IO.BinaryReader, metadataReader : Nitra.Serialization2.MetadataReader) : this
    {
      def (typeInfo, args) = Read(reader, metadataReader);
      TopSubstScope(typeInfo, null, ImmutableArray.Create(args))
    }
  } // class
} // namespace
