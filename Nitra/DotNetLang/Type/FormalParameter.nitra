using Nemerle.Collections;

using Nitra;
using Nitra.Declarations;
using Nitra.Internal;

namespace DotNet
{
  declaration FormalParameter : SelfTypedDeclaration, CustomAttributeHostDeclaration, HasBuildInvocationScope
  {
    symbol
    {
      in Modifier   : ParameterModifier;
      in Index      : uint;
      in Default    : DefaultValue;
      in DeclaredIn : DeclarationSymbol;

      ToString  = AstUtils.FormalParameterToString(this);
      DeclaredInOpt = VSome(DeclaredIn);

      // TODO: add support of optional, custom modifiers, index and default value
      Kind      = "parameter";
      SpanClass = DotNetLang.ParameterSpanClass;
    }

    inout Index      : uint;
    inout Parameters : list[FormalParameterSymbol];
    in    DeclaredIn : DeclarationSymbol;
  stage 1:
    inout Types      : list[TypeSymbol];

    Symbol.DeclaredIn            = DeclaredIn;
    IndexOut                     = IndexIn + 1u;
    Type.Scope                   = Scope;
    TypeRef                      = Type.Ref.Resolve();
    Symbol.Modifier              = Modifier.ValueOrDefault;
    Symbol.Index                 = IndexIn;
    ParametersOut                = Symbol :: ParametersIn;
    TypesOut                     = Symbol.Type :: TypesIn;
    Symbol.Default               = await AstUtils.MakeDefault(Default);
    Default.ExpectedType         = TypeRef.Symbol;
    Default.ScopeIn              = Scope;
    Default.BuildInvocationScope = BuildInvocationScope;

    Type     : QualifiedReference;
    Modifier : ParameterModifier;
    Default  : ExprBase;
  }
}
