using Nitra;
using Nitra.Declarations;
using Nitra.Serialization2;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

namespace DotNet
{
  public class CustomAttributeLookupScope : Scope
  {
    public this(scope : Scope)
    {
      _scope = scope;
    }

    private _scope : Scope;

    public override GetAllSymbols() : Seq[DeclarationSymbol] { _scope.GetAllSymbols() }

    public override Contains(reference : string) : bool
    {
      _scope.Contains(reference) || _scope.Contains(reference + "Attribute")
    }

    public override Bind[TSymbol](reference : Reference) : BindResult[TSymbol]
    {
      def res = _scope.Bind.[TSymbol](reference);
      def reference2 = Reference(reference.Location, reference.Text + "Attribute");
      def res2 = _scope.Bind.[TSymbol](reference2);
      match (res, res2)
      {
        | (BindResult.Nil, BindResult.Nil) => res
        | (_, BindResult.Nil) => res
        | (BindResult.Nil, _) => res2
        | _ => NitraUtils.MakeUnion(ImmutableArray.Create(res, res2))
      }
    }

    public override Bind[TSymbol](isMatch : Predicate[TSymbol]) : BindResult[TSymbol]
    {
      _scope.Bind.[TSymbol](isMatch)
    }

    public override ToDot(nodeToIdMap : Dictionary[object, int], nodes : List[string], edges : List[string]) : void
    {
      def id            = nodeToIdMap.GetObjectId(this);
      def idScope       = nodeToIdMap.GetObjectId(_scope);

      nodes.Add($<#Obj_$id [label="CustomAttributeLookupScope $id"]#>);
      edges.Add($<#Obj_$id -> Obj_$idScope#>);

      _scope.ToDot(nodeToIdMap, nodes, edges);
    }

    public override ToString() : string
    {
      "attribute lookup for " + _scope
    }

    public override Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void
    {
      metadataWriter.WriteObject(_scope, writer);
    }

    public static Deserialize(reader : BinaryReader, metadataReader : MetadataReader) : this
    {
      def scope = metadataReader.ReadObject(reader);
      CustomAttributeLookupScope(scope)
    }
  }
}
