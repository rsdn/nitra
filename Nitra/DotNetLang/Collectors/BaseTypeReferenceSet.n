using Nitra;
using Nitra.Declarations;
using Nitra.Serialization2;
using Nitra.Staging;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace DotNet
{
  public sealed class BaseTypeReferenceSet : ICollector
  {
    private this(parentTypes : Seq[TypeSymbol])
    {
      _parentTypes = HashSet(parentTypes);
    }

    public this(context : DependentPropertyEvalContext)
    {
      if (context != null)
        context.NotifyCollectorCreated(out CreatedOnStage, out CreatedOnPass);
      else
      {
        CreatedOnStage = -1;
        CreatedOnPass = -1;
      }

      _parentTypes  = HashSet();
    }

    private mutable _isEvaluationInProgress : bool;
    private mutable _isCycled               : bool;
    private mutable _ancestorTypes          : HashSet[TypeSymbol];
    private mutable _parentClassScope       : Scope;
    private mutable _parentFullScope        : Scope;
    private mutable _ancestorsFullScope     : Scope;
    private         _parentTypes            : HashSet[TypeSymbol];
    private mutable _implicitBaseTypeResolver : Seq[TypeSymbol] -> TypeSymbol;

    public CreatedOnStage       : int                { get; }
    public CreatedOnPass        : int                { get; }
    public IsCycled             : bool               { get { TryEvaluateHierarchy(); _isCycled } }
    public AncestorTypes        : Seq[TypeSymbol]    { get { TryEvaluateHierarchy(); _ancestorTypes } }
    public ParentTypes          : Seq[TypeSymbol]    { get { _parentTypes } }
    public ParentClassScope     : Scope              { get { TryEvaluateHierarchy(); _parentClassScope } }
    public ParentStructScope    : Scope              { get { EmptyScope.Instance } } //TODO: use scope of System.ValueType type
    public ParentInterfaceScope : Scope              { get { ParentFullScope } } //TODO: gather only Interface types from parent type lists and System.Object
    public ParentFullScope      : Scope              { get { TryEvaluateHierarchy(); _parentFullScope } }
    public AncestorsFullScope   : Scope              { get { TryEvaluateHierarchy(); _ancestorsFullScope } }

    [Collect]
    public AddParent(type : TypeSymbol) : void
    {
      _ = _parentTypes.Add(type);
    }

    [Collect]
    public AddParent(set : Seq[TypeSymbol]) : void
    {
      _parentTypes.UnionWith(set);
    }

    [Collect]
    public AddParent(implicitBaseTypeResolver : Seq[TypeSymbol] -> TypeSymbol) : void
    {
      _implicitBaseTypeResolver = implicitBaseTypeResolver;
    }

    public ContainsParent(type : TypeSymbol) : bool
    {
      _parentTypes.Contains(type)
    }

    public ContainsAncestor(type : TypeSymbol) : bool
    {
      TryEvaluateHierarchy();
      _ancestorTypes.Contains(type)
    }

    private TryEvaluateHierarchy() : void
    {
      when (_ancestorTypes != null)
        return;

      if (_isEvaluationInProgress)
      {
        _isCycled         = true;
        _ancestorTypes    = HashSet();
        _parentClassScope = EmptyScope.Instance;
        _parentFullScope  = EmptyScope.Instance;
      }
      else
      {
        _isEvaluationInProgress = true;

        when (_implicitBaseTypeResolver != null)
        {
          def implicitBaseType = _implicitBaseTypeResolver(_parentTypes);
          when (implicitBaseType != null)
          {
            _ = _parentTypes.Add(implicitBaseType);
          }
          _implicitBaseTypeResolver = null;
        }

        def ancestorTypes = HashSet(_parentTypes);
        mutable parentClassScope;
        mutable parentFullScope = EmptyScope.Instance : Scope;
        mutable ancestorsFullScope = EmptyScope.Instance : Scope;

        foreach (type in _parentTypes)
        {
          | SupportsInheritanceTypeSymbol(IsBaseTypeSetEvaluated=true, IsMemberTableEvaluated=true, BaseTypeSet=parentTypeSet, MemberTable=symbolScope) as symbol
          | ConstructedTypeSymbol(IsTypeInfoEvaluated=true, TypeInfo=GenericContainerTypeSymbol(IsBaseTypeSetEvaluated=true, IsMemberTableEvaluated=true, BaseTypeSet=parentTypeSet, MemberTable=symbolScope) as symbol) =>
            // TODO: need subst of type parameters
            ancestorTypes.UnionWith(parentTypeSet.AncestorTypes);

            parentFullScope = parentFullScope.UnionWith(parentTypeSet.ParentFullScope.HideWith(symbolScope));

            when (parentClassScope : object == null)
            when (symbol is ClassSymbol)
              parentClassScope = parentTypeSet.ParentClassScope.HideWith(symbolScope);

          | SupportsInheritanceTypeSymbol(IsBaseTypeSetEvaluated=true, IsMemberTableEvaluated=false) =>
            Debug.WriteLine("SupportsInheritanceTypeSymbol(IsBaseTypeSetEvaluated=true, IsMemberTableEvaluated=false)");
            assert2(false);

          | _ => (); //assert2(false);
        }

        foreach (type in ancestorTypes)
        {
          | SupportsInheritanceTypeSymbol(MemberTable = symbolScope)
          | ConstructedTypeSymbol(IsTypeInfoEvaluated = true, TypeInfo = GenericContainerTypeSymbol(MemberTable = symbolScope)) =>
            ancestorsFullScope = ancestorsFullScope.HideWith(symbolScope);
          | _ => ()
        }

        unless (_isCycled)
        {
          _ancestorTypes    = ancestorTypes;
          _parentClassScope = parentClassScope ?? EmptyScope.Instance;
          _parentFullScope  = parentFullScope;
          _ancestorsFullScope = ancestorsFullScope;
        }

        _isEvaluationInProgress = false;
      }
    }

    public Serialize(writer : IO.BinaryWriter, metadataWriter : MetadataWriter) : void
    {
      metadataWriter.WriteObjects(_parentTypes, writer)
    }

    public static Deserialize(reader : IO.BinaryReader, metadataReader : MetadataReader) : this
    {
      def parentTypes = metadataReader.ReadObjects(reader);
      BaseTypeReferenceSet(parentTypes)
    }

    public override ToString() : string
    {
      $"CreatedOnStage: $CreatedOnStage CreatedOnPass:$CreatedOnPass ParentTypes: ..$_parentTypes"
    }
  }
}
