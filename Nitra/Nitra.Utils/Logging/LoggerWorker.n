using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Logging;

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading;

namespace Nitra.Logging
{
  public partial module Log
  {
    public LogFilePath : string { get; private set; }

    private class LoggerWorker : IDisposable
    {
      public static SaveLogsCount = 3;

      _queue       : BlockingCollection[string * ConsoleColor * int * DateTime];
      _logFile     : StreamWriter;
      _date        : string;
      _thread      : Thread;
      _cts         : CancellationTokenSource = CancellationTokenSource();
      _bugReporter : BugReporter;

      public this(name : string)
      {
        assert2(_logFile == null, "Only one logger instance can be created!");
        def programDataPath  = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        _date                = DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss");
        def logDir           = Path.Combine(programDataPath, "RSDN", "Nitra");
        def procId           = Process.GetCurrentProcess().Id;
        def fileName         = $"$name-$_date-PID-$procId";
        if (Directory.Exists(logDir))
        {
          def files         = Directory.GetFiles(logDir, name + "-*.html");
          def filesToDelete = files.OrderBy(f => f).Take(Math.Max(files.Length - SaveLogsCount, 0));
          foreach (file in filesToDelete)
          {
            try
            {
              Console.WriteLine(file);
              File.Delete(file);
            }
            catch { _ is IOException => () }
          }
        }
        else
          _ = Directory.CreateDirectory(logDir);
        def logPath          = Path.Combine(logDir, fileName + ".html");
        LogFilePath          = logPath;
        _logFile             = StreamWriter(logPath);
        _queue               = BlockingCollection();
        _bugReporter         = BugReporter(fileName, name, _cts.Token);
        _thread              = Thread(ParseWorkerMain);
        _thread.Priority     = ThreadPriority.BelowNormal;
        _thread.IsBackground = true;
        _thread.Start();
      }

      public Log(msg : string, color : ConsoleColor) : void
      {
        _queue?.Add((msg, color, Thread.CurrentThread.ManagedThreadId, DateTime.Now));
      }

      ParseWorkerMain() : void
      {
        def thread = Thread.CurrentThread;
        thread.Name = "Logger Worker";
        thread.CurrentCulture = CultureInfo.InvariantCulture;
        def header = $<#<!DOCTYPE html>
  <html>
  <head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
      <title>Nitra $_date</title>
  <style>
  body {
    background-color: black;
    text-align: left;
    font-family: Consolas, Monaco, monospace;
    white-space: pre;
  }
  </style>
  </head>

  <body>#>;

        try
        {
          _logFile.WriteLine(header);
          foreach((msg, color, threadId, time) in _queue.GetConsumingEnumerable(_cts.Token))
          {
            try
              if (msg == null && color :> int == -1)
                _logFile.Flush();
              else
                this.WriteLine(threadId, time, msg, color);
            catch
            {
              | e is OperationCanceledException => Log.Canceled(e);
              | e => Log.Exception(e);
            }
          }
        }
        catch
        {
          | e is OperationCanceledException => Log.Canceled(e);
          | e => Log.Exception(e);
        }
        finally
        {
          _logFile.WriteLine("</body>\r\n</html>");
          _logFile.Close();
        }
      }

      static TranslateColor(color : ConsoleColor) : string
      {
        | Black       => "Black"
        | DarkBlue    => "DarkBlue"
        | DarkGreen   => "DarkGreen"
        | DarkCyan    => "DarkCyan"
        | DarkRed     => "DarkRed"
        | DarkMagenta => "DarkMagenta"
        | DarkYellow  => "olive"
        | Gray        => "Gray"
        | DarkGray    => "DarkGray"
        | Blue        => "Blue"
        | Green       => "limegreen"
        | Cyan        => "Cyan"
        | Red         => "Red"
        | Magenta     => "Magenta"
        | Yellow      => "Yellow"
        | White       => "White"
      }

      WriteLine(threadId : int, time : DateTime, msg : string, color : ConsoleColor) : void
      {
        _logFile.Write(<#<span style="color:#>);
        _logFile.Write(TranslateColor(color));
        _logFile.Write(<#">#>);
        _logFile.Write(threadId.ToString("D4"));
        _logFile.Write(time.ToString("│HH:mm:ss.ffffff│"));
        _logFile.Write(msg);
        _logFile.WriteLine(<#</span>#>);
        when (_queue.Count == 0)
          _logFile.Flush();
        Console.ForegroundColor = color;
        Console.WriteLine(msg);
        Console.ResetColor();
        when (color == ConsoleColor.Red)
          _bugReporter?.LogException(threadId, time, msg);
      }

      public Flush() : void
      {
        _queue.Add((null, -1 :> ConsoleColor, 0, DateTime()));
      }

      public Dispose() : void
      {
        try
        {
          _cts.Cancel();
          _cts.Dispose();
        }
        catch ();
        _bugReporter?.Dispose();
        _thread?.Join();
      }
    } // class LoggerWorker
  } // module Log
} // namespace
