using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;
using Nitra.Ast;
using Nitra.Declarations;
using Nitra.Grammar;
using Nitra.Internal;
using Nitra.ProjectSystem;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Globalization;
using System.Linq;

using System.Threading;
using NRB = Nitra.Declarations;

[assembly: ProjectSupport("Nitra DotNet", typeof(DotNet.CompilationUnit))]

namespace DotNet
{
  public partial class CompilationUnit : AstBase, IProjectSupport, NamespaceBody
  {
    [Record]
    private class ProjectData
    {
      public Context       : DependentPropertyEvalContext;
      public RootNamespace : NamespaceSymbol;
      public RootScope     : Scope;
      public Manager       : ManagerClass;
    }

    // IProjectSupport

    public Reset(project : Project) : void
    {
      project.Data = null;
    }

    public RefreshReferences(cancellationToken : CancellationToken, project : Project) : object
    {
      AstTypeUnifier.InitInstance();

      def oldManager = ManagerClass.Instance;
      try
      {
        project.OnSymbolAssemblyResolve += OnSymbolAssemblyResolve;

        def context = DependentPropertyEvalContextEx(project);
        def manager : ManagerClass =
          if (project is NitraProject(Manager = manager) as p)
          {
            context.OnEmitSymbol += p.EmitSymbol;
            manager
          }
          else
            StubCompiler(project);

        ManagerClass.Instance = manager;

        context.CancellationToken = cancellationToken;
        def rootNamespace = NamespaceSymbol();
        rootNamespace.DeclaredIn  = null;
        rootNamespace.FullName    = "";

        def writeMetadataCallback(_)
        {
          SaveNitraMetadata(project, manager, rootNamespace);
          manager.BeforeSaveAssembly -= writeMetadataCallback;
        }
        unless (manager.IsIntelliSenseMode)
          manager.BeforeSaveAssembly += writeMetadataCallback;

        def rootScope = CreateNemerleSymbols(cancellationToken, manager, rootNamespace, context);
        rootNamespace.EvalProperties(context);
        context.RootNamespace = rootNamespace;

        // ensure static symbols are created
        _ = WellKnownSymbols.GetSymbolsToEvaluate();

        LoadNitraMetadata(cancellationToken, project, manager, rootNamespace);
        CreatePredefinedSymbols(rootNamespace.MemberTable, context);
        ProjectData(context, rootNamespace, rootScope, manager)
      }
      finally
      {
        ManagerClass.Instance = oldManager;
        project.OnSymbolAssemblyResolve -= OnSymbolAssemblyResolve;
      }
    }

    public RefreshProject(cancellationToken : CancellationToken, files : ImmutableArray[FileEvalPropertiesData], data : object) : void
    {
      def oldManager = ManagerClass.Instance;
      def (context, rootNamespace, rootScope, manager) = data :> ProjectData;

      context.CancellationToken = cancellationToken;

      try
      {
        ManagerClass.Instance = manager;

        def removeParsedSymbols(tableScope : TableScope)
        {
          tableScope.Undefine(_.IsParsed);
          foreach (symbols in tableScope.Symbols.ToArray())
          foreach (symbol is NamespaceSymbol in symbols)
            removeParsedSymbols(symbol.MemberTable);
        }
        removeParsedSymbols(rootNamespace.MemberTable);

        def evalHost = NitraProjectEvalPropertiesHost(files, rootNamespace, rootScope);
        evalHost.EvalProperties(context, "SymbolHierarchy", 0);
        evalHost.EvalProperties(context, "Scopes", 1);
        // We need scopes to bind literals references which we use to calculate rule fields name.
        // This requires a separate stage, since the field symbols must be created before the rule bodies are typed.
        evalHost.EvalProperties(context, "Make rule fields symbols", 2);
        evalHost.EvalProperties(context, "Type bodies binding", 3);
        evalHost.Finish();
      }
      finally ManagerClass.Instance = oldManager;
    }

    public virtual Postprocessing(cancellationToken : CancellationToken, project : Project, asts : ImmutableArray[IAst * bool], data : object) : void
    {
      IgnoreParams();
    }

    public GetSymbolById(data : object, symbolId : int) : ValueOption[DeclarationSymbol]
    {
      def rootNamespace = (data :> ProjectData).RootNamespace;
      // TODO: cache symbols an use it cache to find symbol by id
      def findSymbol(tableScope : TableScope) : ValueOption[DeclarationSymbol]
      {
        foreach (symbols in tableScope.Symbols)
        foreach (symbol in symbols)
        {
          when (symbol.Id == symbolId)
            return ValueOption.Some(symbol);

          when (symbol is NamespaceSymbol as ns)
          {
            def result = findSymbol(ns.MemberTable);
            when (result.IsSome)
              return result;
          }
        }

        ValueOption.None()
      }

      findSymbol(rootNamespace.MemberTable)
    }

    public DeconstructType(symbol : DeclarationSymbol, type : out TypeSymbol, typeArgs : out ImmutableArray[TypeSymbol]) : bool
    {
      match (symbol)
      {
        | s is TopConstructedTypeSymbol    => type = s.TypeInfo; typeArgs = s.Args; true
        | s is NestedConstructedTypeSymbol => type = s.TypeInfo; typeArgs = s.Args; true
        | _ => type = null; typeArgs = ImmutableArray.Empty; false
      }
    }

    public VisitGlobalSymbols(data : object, callback : Predicate[DeclarationSymbol]) : void
    {
      def rootNamespace = (data :> ProjectData).RootNamespace;
      _ = rootNamespace.VisitChildrenAndSelf(SymbolUtils.GetNestedSymbol, callback);
    }

    // end of IProjectSupport implementation

    class StubCompiler : ManagerClass
    {
      public this(project : Project)
      {
        base (CompilationOptions());
        _isIntelliSenseMode = true;
        this.Options.ColorMessages = false;
        def libs            = project.Libs;
        def localPath       = IO.Path.GetFullPath(Uri(typeof(ManagerClass).Assembly.CodeBase).LocalPath);
        def macroLibPath    = project.ProjectDir;
        def compilerDir     = IO.Path.GetDirectoryName(localPath);
        this.Options.DoNotLoadMacros = true;
        unless (string.IsNullOrEmpty(macroLibPath))
          this.Options.MacrosToLoad ::= macroLibPath;
        this.Options.LibraryPaths ::= compilerDir;
        foreach (lib in libs)
        {
          | FullNameLibReference     => this.Options.ReferencedLibraries ::= lib.ToString();
          | FileLibReference as file => this.Options.ReferencedLibraries ::= IO.Path.GetFullPath(IO.Path.Combine(project.ProjectDir, file.Path));
          | ProjectReference as prj  => this.Options.ReferencedLibraries ::= prj.Path;
          | _ => assert2(false, "Not supported LibReference");
        }
        InitCompiler ();
        LoadExternalLibraries ();
      }
    }

    private static OnSymbolAssemblyResolve(_ : Project, fullName : System.Reflection.AssemblyName) : System.Reflection.Assembly
    {
      def name = fullName.Name;

      if (name.StartsWith("DotNetLang", StringComparison.Ordinal))
        typeof(DotNet.ClassSymbol).Assembly
      else if (name.StartsWith("Nitra.Runtime", StringComparison.Ordinal))
        typeof(Nitra.Location).Assembly
      else if (name.StartsWith("Nitra.Grammar", StringComparison.Ordinal))
        typeof(CompilationUnit).Assembly
      else
        null
    }

    private static NitraMetadataStreamName = "Nitra.Metadata2";

    private static LoadNitraMetadata(cancellationToken : CancellationToken, project : Project, manager : ManagerClass, rootNamespace : NamespaceSymbol) : void
    {
      when (manager is StubCompiler)
        project.Init(manager.ReferencedAssemblies.Select(a => a.Assembly.GetName()));

      def assemblyWithMetadata = Dictionary();
      foreach (reference in manager.ReferencedAssemblies)
      {
        when (cancellationToken.IsCancellationRequested)
          return;

        def assembly       = reference.Assembly;
        def metadataStream = assembly.GetManifestResourceStream(NitraMetadataStreamName);
        when (metadataStream != null)
        {
          def assemblyId = project.GetAssemblyId(assembly.GetName());
          def file       = AssemblyFile(project, assembly.CodeBase);
          assemblyWithMetadata.Add(assemblyId, (assembly, metadataStream, file));
        }
      }

      def visitedAssemblies = HashSet();
      def visitAssembly(assemblyId)
      {
        when (visitedAssemblies.Add(assemblyId))
        {
          mutable data;
          when (assemblyWithMetadata.TryGetValue(assemblyId, out data))
          {
            def (assembly, metadataStream, file) = data;
            foreach (dependency in assembly.GetReferencedAssemblies())
              visitAssembly(project.GetAssemblyId(dependency));

            def source = SingleLineSourceSnapshot("Fake source: " + file.Name, file);
            def reader = Nitra.Serialization2.MetadataReader(project, source);
            try reader.ReadRoot(rootNamespace, metadataStream)
            catch { e => throw ApplicationException($"Load symbols from '$file' failed. Exception: $(e.Message)", e); }
          }
        }
      }

      foreach (assemblyId in assemblyWithMetadata.Keys)
      {
        when (cancellationToken.IsCancellationRequested)
          return;

        visitAssembly(assemblyId);
      }
    }

    private static CreatePredefinedSymbols(rootScope : TableScope, context : DependentPropertyEvalContextEx) : void
    {
      def nitraNs = GetOrCreatePredefinedSymbol.[NamespaceSymbol](rootScope, Location.Default, "Nitra", context, () => NamespaceSymbol());

      context.Language = GetOrCreatePredefinedSymbol.[LanguageSymbol](nitraNs.MemberTable, Location.Default, "Language", context,
        fun()
        {
          def symbol = LanguageSymbol();
          symbol.BaseTypeSet = BaseTypeReferenceSet(null);
          symbol
        });

      def declarationsNs = GetOrCreatePredefinedSymbol.[NamespaceSymbol](nitraNs.MemberTable, Location.Default, "Declarations", context, () => NamespaceSymbol());

      def scopedAstSymbol = GetOrCreatePredefinedSymbol.[TopAstSymbol](declarationsNs.MemberTable, Location.Default, "ScopedAst", context,
        fun()
        {
          def symbol = TopAstSymbol();
          symbol.FullName = "Nitra.Declarations.ScopedAst";
          symbol.BaseTypeSet = BaseTypeReferenceSet(null);
          symbol
        });

      context.Declaration = GetOrCreatePredefinedSymbol.[TopDeclSymbol](declarationsNs.MemberTable, Location.Default, "Declaration", context,
        fun()
        {
          def symbol = TopDeclSymbol();
          symbol.FullName = "Nitra.Declarations.Declaration";
          symbol.BaseTypeSet = BaseTypeReferenceSet(null);
          symbol.BaseTypeSet.AddParent(scopedAstSymbol);
          symbol.IsDeclaration = true;
          symbol.IsAbstract    = true;
          symbol.DeclaredIn    = declarationsNs;
          symbol
        });

      context.DeclarationSymbol = GetOrCreatePredefinedSymbol.[SymbolDeclarationSymbol](declarationsNs.MemberTable, Location.Default, "DeclarationSymbol", context,
        fun()
        {
          def symbol = SymbolDeclarationSymbol();
          symbol.FullName = "Nitra.Declarations.DeclarationSymbol";
          symbol.BaseTypeSet   = BaseTypeReferenceSet(null);
          symbol.DeclaredInOpt = VSome(declarationsNs);
          symbol
        });
    }

    private static GetOrCreatePredefinedSymbol[TSymbol](scope : TableScope, loc : Nitra.Location, name : string, context : DependentPropertyEvalContext, symbolFactory : Func[DeclarationSymbol]) : TSymbol
      where TSymbol : DeclarationSymbol
    {
      def result = Reference(loc, name).Bind(scope);
      if (result.IsSymbolEvaluated)
      {
        result.Symbol
      }
      else
      {
        def decl   = PredefinedDeclaration(Name(loc, name), symbolFactory);
        def symbol = decl.DefineSymbol(scope) :> TSymbol;
        symbol.EvalProperties(context);
        symbol
      }
    }

    private static SaveNitraMetadata(project : Project, manager : ManagerClass, rootNamespace : NamespaceSymbol) : void
    {
      try
      {
        def metadataFileName = manager.Options.OutputFileName + ".nitrametadata2";
        def metadataWriter   = Nitra.Serialization2.MetadataWriter(project);
        using (stream = IO.File.OpenWrite(metadataFileName))
          metadataWriter.WriteRoot(rootNamespace, stream);
        manager.Options.EmbeddedResources ::= metadataFileName + "," + NitraMetadataStreamName;
      }
      catch
      {
        | x is Nitra.Serialization2.InvalidSymbolException => Message.Error(x.Message);
      }
    }

    private static CreateNemerleSymbols(cancellationToken : CancellationToken, manager : ManagerClass, rootNamespace : NamespaceSymbol, context : DependentPropertyEvalContext) : Scope
    {
      def nemerleNsRoot     = manager.NameTree.NamespaceTree;
      def loc               = Nitra.Location.Default;
      def nodeToSymbolMap   = Hashtable.[TypeInfo, TypeSymbol]();
      def aliases           = List();

      def createTypeParameters(tycon : TypeInfo) : ImmutableArray[TypeSymbol]
      {
        def count = tycon.TyparmsCount;
        if (count == 0)
          ImmutableArray.Empty
        else
        {
          def result = ImmutableArray.CreateBuilder(count);
          mutable typarms = tycon.Typarms;
          for (mutable i = 0; i < count; ++i)
          {
            def tp    = typarms.Head;
            def tps   = TypeParameterSymbol();
            tps.UpdateName(tp.Name);
            tps.EvalProperties(context);
            result.Add(tps);
            typarms   = typarms.Tail;
          }
          result.MoveToImmutable()
        }
      }
      def makeTypeParameters(symbol : GenericTypeSymbol, tycon : TypeInfo) : void
      {
        unless (symbol.IsTypeParametersCountEvaluated)
          symbol.TypeParametersCount = tycon.TyparmsCount;
        unless (symbol.IsTypeParametersEvaluated)
          symbol.TypeParameters = createTypeParameters(tycon);
      }
      def loadNsMemebers(node : NamespaceTree.Node, declaredIn : DotNet.NamespaceSymbol) : void
      {
        def addTopType(node : NamespaceTree.Node, tycon : TypeInfo) : void
        {
          def name = NRB.Name(loc, node.PartName);
          def kind = tycon.GetTydecl();
          match (kind)
          {
            | Interface
            | Variant      // temporary treat Variants as class
            | VariantOption
            | Class =>
              def symbol : TopGenericTypeSymbol =
                        if (tycon.IsDelegate) ExternalTypeDeclaration.[TopDelegateSymbol](name, tycon).DefineSymbol(declaredIn.MemberTable)
                  else if (tycon.IsInterface) ExternalTypeDeclaration.[TopInterfaceSymbol](name, tycon).DefineSymbol(declaredIn.MemberTable)
                  else if (tycon.IsValueType) ExternalTypeDeclaration.[TopStructSymbol](name, tycon).DefineSymbol(declaredIn.MemberTable)
                  else                        ExternalTypeDeclaration.[TopClassSymbol](name, tycon).DefineSymbol(declaredIn.MemberTable);
              makeTypeParameters(symbol, tycon);
              unless (symbol.IsDeclaredInEvaluated)
                symbol.DeclaredIn = declaredIn;
              nodeToSymbolMap[tycon] = symbol;
              symbol.Scope = EmptyScope.Instance; // temp
              symbol.EvalProperties(context);

            | Alias         =>
              def symbol = ExternalTypeDeclaration.[TypeAliasSymbol](name, tycon).DefineSymbol(declaredIn.MemberTable);
              makeTypeParameters(symbol, tycon);
              unless (symbol.IsDeclaredInEvaluated)
                symbol.DeclaredIn = declaredIn;
              aliases.Add(symbol);

              nodeToSymbolMap[tycon] = symbol;
              symbol.EvalProperties(context);

            | Enum          =>
              def symbol = ExternalTypeDeclaration.[TopEnumSymbol](name, tycon).DefineSymbol(declaredIn.MemberTable);
              nodeToSymbolMap[tycon] = symbol;
              unless (symbol.IsDeclaredInEvaluated)
                symbol.DeclaredIn = declaredIn;
              symbol.EvalProperties(context);
          }
        }
        node.EnsureCached();

        match (node.Value)
        {
          | No                               => ()
          | MacroCall                        => ()
          | null                             => ()
          | NamespaceReference               =>
            when (cancellationToken.IsCancellationRequested)
              return;
            def name   = NRB.Name(loc, node.PartName);
            //assert2(!(node.FullName is ["Nemerle", "Core"]));
            def symbol = ExternalNamespaceDeclaration(name, node).DefineSymbol(declaredIn.MemberTable);
            unless (symbol.IsDeclaredInEvaluated)
              symbol.DeclaredIn = declaredIn;
            symbol.EvalProperties(context);
            node.EnsureCached();
            if (node.Children != null)
              foreach (subNode in node.Children.Values.ToArray())
                loadNsMemebers(subNode, symbol);
            else
            {
              assert2(true);
            }

          | Cached(tycon) =>  addTopType(node, tycon);
          | CachedAmbiguous(elems)       => foreach (e in elems) addTopType(node, e);
          | NotLoaded(_externalType)     => assert2(false)
          | NotLoadedList(_externalType) => assert2(false)
        }
      }

      rootNamespace.EvalProperties(context);

      foreach (node in nemerleNsRoot.Children.Values.ToArray())
        loadNsMemebers(node, rootNamespace);

      def nodeToSymbolMap = nodeToSymbolMap;

      foreach (alias in aliases)
      {
        def decl     = alias.FirstDeclarationOrDefault :> IExternalTypeDeclaration;
        def a        = decl.NemerleTypeInfo.GetTydecl() :> Typedtree.TypeDeclaration.Alias;
        def typeInfo = a.ty.TypeInfo;
        def fullName = a.ty.ToString();
        alias.Replacement =
          if (typeInfo != null)
          {
            mutable value;
            if (nodeToSymbolMap.TryGetValue(typeInfo, out value))
              Ref.CreateBind(loc, value)
            else
            {
              assert2(false);
              Ref.CreateBind(loc, fullName, BindResult.Nil())
            }
          }
          else
            Ref.CreateBind(loc, fullName, BindResult.Nil())
      }

      def setParents(ns : NamespaceSymbol) : void
      {
        foreach (symbols in ns.MemberTable.Symbols)
        {
          foreach (symbol in symbols)
          {
            | x is NamespaceSymbol => setParents(x)
            | x is GenericContainerTypeSymbol =>
              def baseTypeSet = BaseTypeReferenceSet(context);
              x.BaseTypeSet = baseTypeSet;
              def decl = x.FirstDeclarationOrDefault :> IExternalTypeDeclaration;
              def ti = decl.NemerleTypeInfo;
              def superTypes = ti.GetDirectSuperTypes();
              foreach (superType in superTypes)
              {
                //def baseType = FixedTypeToTypeRef(file, span, superType);
                //when (baseType != null)
                //  baseTypeSet.AddParent(baseType);
              }

            | _ => () //assert2(false);
          }
        }
      }

      setParents(rootNamespace);

      def bindTuple(scope : Scope, typeParameterCoiunt : int) : Ref[GenericContainerTypeSymbol]
      {
        def alg(symbol : GenericContainerTypeSymbol) : ValueOption[GenericContainerTypeSymbol]
        {
          if (symbol.TypeParametersCount == typeParameterCoiunt)
            ValueOption.Some(symbol)
          else
            ValueOption.None()
        }

        Reference(loc, "Tuple").Bind(scope).Resolve.[GenericContainerTypeSymbol](alg)
      }
      def bind(scope : Scope, name : string) : Ref[NamespaceSymbol]
      {
        Reference(loc, name).Bind(scope)
      }

      def makeTuples() : void
      {
        def nemerleNs = bind(rootNamespace.MemberTable, "Nemerle");
        unless (nemerleNs.IsSymbolEvaluated)
          return;

        def builtinsNs = bind(nemerleNs.Symbol.MemberTable, "Builtins");
        unless (builtinsNs.IsSymbolEvaluated)
          return;

        def declaredIn = rootNamespace;
        for (mutable i = 2; i <= 20; i++)
        {
          def realSymbolRef = bindTuple(builtinsNs.Symbol.MemberTable, i);
          def realSymbol    = realSymbolRef.Symbol;
          def realDecl      = realSymbol.FirstDeclarationOrDefault :> IExternalTypeDeclaration;
          def name          = NRB.Name(loc, "#Tuple");
          def symbol        = ExternalTypeDeclaration.[TypeAliasSymbol](name, realDecl.NemerleTypeInfo).DefineSymbol(declaredIn.MemberTable);
          symbol.TypeParametersCount = i;
          symbol.TypeParameters      = realSymbol.TypeParameters;
          symbol.DeclaredIn          = declaredIn;
          symbol.EvalProperties(context);
        }
      }

      makeTuples();

      def res1 = bind(rootNamespace.MemberTable, "Nemerle");

      when (res1.IsSymbolEvaluated)
      {
        def res2 = bind(res1.Symbol.MemberTable, "Core");
        when (res2.IsSymbolEvaluated)
          return res2.Symbol.MemberTable.HideWith(rootNamespace.MemberTable);
      }

      rootNamespace.MemberTable
    }

    static FixedTypeToTypeRef(ti : TypeInfo, typeMap : Hashtable[TypeInfo, TypeSymbol], loc : Nitra.Location, t : Nemerle.Compiler.TypeVar, context : DependentPropertyEvalContext, pos : int = -1) : TypeSymbol
    {
      match (t)
      {
        | FixedType.Class(ti, []) =>
          def sym = typeMap[ti];
          sym

        //| FixedType.Class(ti, args) =>
        //  def constructedType = AstUtils.CreateConstructedTypeSymbol(file, span);
        //  def sym = typeMap[ti] :> GenericTypeSymbol;
        //  constructedType.TypeInfo = sym;
        //  def resultArgs = array(args.Length);
        //  constructedType

        | FixedType.StaticTypeVarRef(staticTypeVar) =>
          null

        | _ => null
      }
    }
  }

  class NitraProjectEvalPropertiesHost : ProjectEvalPropertiesHost
  {
    private _rootNamespace : NamespaceSymbol;
    private _rootScope     : Scope;

    public this(files : ImmutableArray[FileEvalPropertiesData], rootNamespace : NamespaceSymbol, rootScope : Scope)
    {
      base(files, (rootNamespace :: WellKnownSymbols.GetSymbolsToEvaluate()).ToImmutableArray());
      _rootNamespace = rootNamespace;
      _rootScope     = rootScope;
    }

    protected override BeforeStage(context : DependentPropertyEvalContext, _passName : string) : void
    {
      match (context.Stage)
      {
        | 0 =>
          foreach (file in _files)
            when (file.Ast is CompilationUnit as cu)
              cu.RootNamespace = _rootNamespace;

        | 1 =>
          foreach (file in _files)
            when (file.Ast is CompilationUnit as cu)
              cu.Scope = _rootScope;

        | _ => ()
      }
    }
  }

  interface IExternalTypeDeclaration
  {
    NemerleTypeInfo : TypeInfo { get; }
  }

  [Record]
  class ExternalTypeDeclaration[TSymbol] : ExternalDeclaration[TSymbol], IExternalTypeDeclaration
    where TSymbol : DeclarationSymbol
  {
    public NemerleTypeInfo : TypeInfo { get; private set; }
  }

  [Record]
  class ExternalNamespaceDeclaration : ExternalDeclaration[NamespaceSymbol]
  {
    public NemerleNode : NamespaceTree.Node { get; private set; }
    public override CreateSymbol() : DeclarationSymbol { NamespaceSymbol() }
  }

  internal sealed class AssemblyFile : ConcreteFile
  {
    public this(project : Project, fullName : string)
    {
      base(null);
      Project  = project;
      FullName = fullName;
    }

    private mutable _source   : Nitra.SourceSnapshot;

    public override Project     : Project        { get; }
    public override Length      : int            { get { 0 } }
    public override FullName    : string         { get; }
    public override Language    : Nitra.Language { get { Nitra.Language.Instance } }
    public override GetSource() : SourceSnapshot { when(_source == null) _source = SingleLineSourceSnapshot("", this); _source }
    public override IsFake      : bool           { get { true } }
  }
}
